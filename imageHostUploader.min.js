// ==UserScript==
// ==UserLibrary==
// @name         imageHostUploader
// @namespace    https://openuserjs.org/users/Anakunda
// @version      2.48.8
// @author       Anakunda
// @license      GPL-3.0-or-later
// @copyright    2021, Anakunda (https://openuserjs.org/users/Anakunda)
// @require      https://greasyfork.org/scripts/408084-xhrlib/code/xhrLib.js
// @require      https://greasyfork.org/scripts/404516-progressbars/code/progressBars.js
// @grant        GM_xmlhttpRequest
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_deleteValue
// @exclude      *
// ==/UserScript==
// ==/UserLibrary==
'use strict';const minUploadSpeed=parseFloat(GM_getValue('min_upload_speed')),rehostTimeout=3e4,httpParser=/^(https?:\/\/.+)$/i,nonWordStripper=/[\x00-\x2C\x2E\x2F\x3A-\x40\x5B-\x60\x7B-\xFF]+/g;// in Mbit/s
var testRemoteSizes=GM_getValue('test_remote_sizes'),inputDataHandler,textAreaDropHandler,textAreaPasteHandler,imageUrlResolver;void 0===testRemoteSizes&&GM_setValue('test_remote_sizes',testRemoteSizes=!1);// time consuming
try{var verifiedImageUrls=new Map(JSON.parse(sessionStorage.verifiedImageUrls))}catch(e){verifiedImageUrls=new Map}try{var fileSizeCache=new Map(JSON.parse(sessionStorage.fileSizeCache))}catch(e){fileSizeCache=new Map}try{var fileTypeCache=new Map(JSON.parse(sessionStorage.fileTypeCache))}catch(e){fileTypeCache=new Map}function imageHostUploaderInit(_inputDataHandler,_textAreaDropHandler,_textAreaPasteHandler,_imageUrlResolver){inputDataHandler=_inputDataHandler,textAreaDropHandler=_textAreaDropHandler,textAreaPasteHandler=_textAreaPasteHandler,imageUrlResolver=_imageUrlResolver}function getUploadTimeout(totalSize){return minUploadSpeed>0&&totalSize>0?Math.max(Math.ceil(8e3*totalSize/minUploadSpeed/2**20),1e4):void 0}function uuid(){let dt=(new Date).getTime();return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,(function(c){let r=(dt+16*Math.random())%16|0;return dt=Math.floor(dt/16),('x'==c?r:3&r|8).toString(16)}))}String.prototype.toASCII=function(){return this.normalize("NFKD").replace(/[\x00-\x1F\u0080-\uFFFF]/g,'')},Array.prototype.flatten=function(){return this.reduce((function(flat,toFlatten){return flat.concat(Array.isArray(toFlatten)?toFlatten.flatten():toFlatten)}),[])},Blob.prototype.getContent=function(){return new Promise((resolve,reject)=>{var reader=new FileReader;reader.onload=()=>{reader.result.length!=this.size&&console.warn(`FileReader: binary string read length mismatch (${reader.result.length} ≠ ${this.size})`),resolve({name:this.name,type:this.type,size:reader.result.length,data:reader.result})},reader.onerror=reader.ontimeout=()=>{reject(`FileReader error (${this.name})`)},reader.readAsBinaryString(this)})},Blob.prototype.getText=function(encoding){return new Promise((resolve,reject)=>{var reader=new FileReader;reader.onload=()=>{reader.result.length!=this.size&&console.warn(`FileReader: text string read length mismatch (${reader.result.length} ≠ ${this.size})`),resolve(reader.result)},reader.onerror=reader.ontimeout=()=>{reject(`FileReader error (${this.name})`)},reader.readAsText(this,encoding)})};class PTPimg{constructor(){if(this.alias='PTPimg',this.origin='https://ptpimg.me',this.types=['png','jpeg','gif','bmp'],this.batchLimit=20,this.whitelist=['passthepopcorn.me','redacted.ch','orpheus.network','notwhat.cd','dicmusic.club','broadcasthe.net'],!(this.apiKey=GM_getValue('ptpimg_api_key'))&&window.localStorage.ptpimg_it)try{(this.apiKey=JSON.parse(window.localStorage.ptpimg_it).api_key)&&GM_setValue('ptpimg_api_key',this.apiKey)}catch(e){console.debug(e)}void 0===this.apiKey&&GM_setValue('ptpimg_api_key','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.batchLimit&&images.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):this.setSession().then(apiKey=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';images.forEach((image,ndx)=>{formData+='Content-Disposition: form-data; name="file-upload['+ndx+']"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="api_key"\r\n\r\n',formData+=apiKey+'\r\n',formData+='--'+boundary+'--\r\n',GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload.php',responseType:'json',headers:{Accept:'application/json','Content-Type':'multipart/form-data; boundary='+boundary},data:formData,binary:!0,timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)reject(defaultErrorHandler(response));else if(response.response){if(response.response.length<images.length)return console.warn('PTPimg returning incomplete list of images (',response.response,')'),reject(`not all images uploaded (${response.response.length}/${images.length})`);response.response.length>images.length&&console.warn('PTPimg returns more links than expected (',response.response,images,')'),resolve(response.response.map((item,ndx)=>(!item.ext&&/\.([a-z]+)(?=$|[\#\?])/i.test(images[ndx].name)&&(item.ext=RegExp.$1),this.origin+'/'+item.code+'.'+item.ext)))}else{const htmlMessage=domParser.parseFromString(response.responseText,'text/html').body.textContent.trim();if(/\b(?:Fatal error|Uncaught Exception):/i.test(htmlMessage)){console.warn('PTPimg throws fatal error, trying to redirect.\n\n',htmlMessage);let redirects=GM_getValue('ptpimg_http500_redirects',[/*'imgcdn', */'imgbb','pixhost','postimage','gifyu']);if('string'==typeof redirects&&(redirects=redirects.split(/\W+/).filter(Boolean)),!Array.isArray(redirects))return reject('invalid redirects list format');if(redirects=redirects.filter(alias=>alias in imageHostHandlers&&'function'==typeof imageHostHandlers[alias].upload).map(alias=>imageHostHandlers[alias]),redirects.length<=0)throw'Redirects list for PTPimg is empty';const redirect=(index=0)=>index>=0&&index<redirects.length?('function'==typeof progressHandler&&progressHandler(null),redirects[index].upload(images,progressHandler,!0).catch(reason=>redirect(index+1))):Promise.reject('all redirects failed');redirect().then(results=>this.rehost(results.map(directLinkGetter),null)).then(resolve,reject)}else reject('void or malformed response')}},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})):Promise.reject('invalid argument')}rehost(urls){if(!Array.isArray(urls))return Promise.reject('invalid argument');if(urls.length<=0)return Promise.reject('nothing to rehost');if(this.batchLimit&&urls.length>this.batchLimit)return Promise.reject('batch limit exceeded ('+this.batchLimit+')');const redirect=urls=>{if('string'==typeof urls&&(urls=[urls]),!Array.isArray(urls))return Promise.reject('invalid argument');let redirects=GM_getValue('ptpimg_http500_redirects',[/*'imgcdn', */'imgbb','pixhost','postimage','gifyu']);if('string'==typeof redirects&&(redirects=redirects.split(/\W+/).filter(Boolean)),!Array.isArray(redirects))throw'invalid redirects list format';if(redirects=redirects.filter(alias=>alias in imageHostHandlers&&'function'==typeof imageHostHandlers[alias].rehost).map(alias=>imageHostHandlers[alias]),redirects.length<=0)return Promise.reject('Redirects list for PTPimg is empty (forcing local reupload)');const redirect=(index=0)=>(index>=0&&index<redirects.length?redirects[index].rehost(urls,null,!0).catch(reason=>redirect(index+1)):this.reupload(urls)).then(results=>results.map(directLinkGetter));return redirect()};return this.setSession().then(apiKey=>{const rehost=(urls,allowFallback=!1)=>Promise.all(urls.map(url=>{if(!httpParser.test(url))return Promise.reject('URL not valid ('+url+')');const domain=new URL(url).hostname;
// known blocked hosts
return['img.discogs.com','i.discogs.com'].some(hostname=>domain==hostname)||[/*'.dzcdn.net', */'omdb.org'].some(hostname=>domain.endsWith(hostname))?redirect([url]).then(singleImageGetter):/\.(?:jpe?g|jfif|png|gif|bmp)$/i.test(url)?verifyImageUrl(url):verifyImageUrl(url+'#.jpg').then(finalUrl=>url+'#.jpg').catch(reason=>{let redirects=[/*'imgcdn', */'imgbb','pixhost','gifyu'].filter(alias=>alias in imageHostHandlers&&'function'==typeof imageHostHandlers[alias].rehost).map(alias=>imageHostHandlers[alias]);const redirect=(index=0)=>(index>=0&&index<redirects.length?redirects[index].rehost([url],null,!0).catch(reason=>redirect(index+1)):Promise.reject('redirection failed on all hosts')).then(results=>results.map(directLinkGetter));return redirect()})})).then(imageUrls=>{console.debug('PTPimg.rehost(...) input:',imageUrls);let formData=new URLSearchParams({'link-upload':imageUrls.join('\r\n'),api_key:apiKey});return globalXHR(this.origin+'/upload.php',{responseType:'json',timeout:imageUrls.length*rehostTimeout},formData).then(({response:response})=>response?//Promise.reject('void response');
response.length<imageUrls.length?(console.warn('PTPimg returning incomplete list of images (',response,')'),Promise.reject(`not all images rehosted to (${response.length}/${imageUrls.length})`)):(response.length>imageUrls.length&&console.warn('PTPimg returns more links than expected (',response,imageUrls,')'),response.map((item,ndx)=>(!item.ext&&/\.([a-z]+)(?=$|[\#\?])/i.test(imageUrls[ndx])&&(item.ext=RegExp.$1),this.origin+'/'+item.code+'.'+item.ext))):this.reupload(urls),reason=>allowFallback&&/^(?:HTTP error 500)\b/.test(reason)?(console.warn('PTPimg internal server error ['+reason+'] for one or more remote images => trying to redirect'),redirect(urls).then(rehost)):Promise.reject(reason))});return rehost(urls,!0)})}reupload(urls){return Array.isArray(urls)&&urls.length>0?Promise.all(urls.map(url=>globalXHR(url,{responseType:'blob',headers:{Accept:'image/*'}}).then(response=>{let image={name:response.finalUrl.replace(/^.*\//,''),data:response.responseText,size:response.getHeaderValue('Content-Length')||response.responseText.length,type:response.getHeaderValue('Content-Type')};if(!image.type)switch(response.finalUrl.replace(/[\?\#].*$/,'').replace(/^.*\./,'').toLowerCase()){case'jpg':case'jpeg':case'jfif':image.type='image/jpeg';break;case'png':image.type='image/png';break;case'gif':image.type='image/gif';break;case'bmp':image.type='image/bmp';break;default:return Promise.reject('Unsupported extension')}return image}))).then(PTPimg.prototype.upload.bind(this)):Promise.reject('invalid or void argument')}setSession(){return this.apiKey?Promise.resolve(this.apiKey):globalXHR(this.origin).then(response=>{var apiKey=response.document.getElementById('api_key');if(null==apiKey){let counter=GM_getValue('ptpimg_reminder_read',0);return counter<3&&(alert(`PTPimg API key could not be captured. Please login to ${this.origin}/ and redo the action.`),GM_setValue('ptpimg_reminder_read',++counter)),Promise.reject('API key not configured')}return(this.apiKey=apiKey.value)?(GM_setValue('ptpimg_api_key',this.apiKey),Promise.resolve(this.apiKey).then(apiKey=>{alert(`Your PTPimg API key [${apiKey}] was successfully configured`)}),this.apiKey):Promise.reject('assertion failed: empty PTPimg API key')})}}class Chevereto{constructor(hostName,alias,types,sizeLimit,params){if('string'!=typeof hostName||!hostName)throw'Chevereto adapter: missing mandatory host name';if(this.origin=httpParser.test(hostName)?hostName.replace(/\/+$/,''):'https://'+hostName,this.alias=alias,Array.isArray(types)&&(this.types=types),'object'!=typeof params&&(params={}),this.sizeLimit=sizeLimit||params.sizeLimitAnonymous,this.sizeLimit>0||(this.sizeLimit=void 0),params.sizeLimitAnonymous<this.sizeLimit&&(this.sizeLimitAnonymous=params.sizeLimitAnonymous),alias)var al=alias.replace(nonWordStripper,'');!params.configPrefix&&al&&(params.configPrefix=al.toLowerCase()),!params.configPrefix&&/^(?:www\.)?([\w\-]+)(?:\.[\w\-]+)+$/.test(hostName)&&(params.configPrefix=RegExp.$1.toLowerCase()),(this.configPrefix=params.configPrefix)?(this.uid=GM_getValue(this.configPrefix+'_uid'),void 0===this.uid&&alias&&GM_setValue(this.configPrefix+'_uid',''),this.password=GM_getValue(this.configPrefix+'_password'),void 0===this.password&&alias&&GM_setValue(this.configPrefix+'_password',''),this.apiKey=GM_getValue(this.configPrefix+'_api_key'),void 0===this.apiKey&&alias&&params.apiEndpoint&&GM_setValue(this.configPrefix+'_api_key','')):console.warn('Chevereto adapter: config prefix could not be evaluated, authorized operations not available'),this.jsonEndpoint=params.jsonEndpoint,this.apiEndpoint=params.apiEndpoint,this.apiFieldName=params.apiFieldName,this.apiResultKey=params.apiResultKey}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.setSession(!1).then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{if(this.sizeLimit>0&&image.size>this.sizeLimit*2**20||this.sizeLimitAnonymous>=0&&!session.username&&!session.key&&image.size>this.sizeLimitAnonymous*2**20)return Promise.reject(`image size exceeds site limit (${image.size})`);const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n',params=Object.assign({action:'upload',type:'file',nsfw:0,thumb_width:200,
//thumb_height: 200,
format:'json'},session);Object.keys(params).forEach((field,index,arr)=>{formData+='Content-Disposition: form-data; name="'+field+'"\r\n\r\n',formData+=params[field]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="'+(session.key&&this.apiFieldName||'source')+'"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n'+image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:session.key?(this.apiEndpoint||this.origin+'/api/1')+'/upload':this.jsonEndpoint||this.origin+'/json',responseType:'json',headers:{Accept:'application/json','Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{if(response.status>=200&&response.status<400)try{response.response.success?resolve(Chevereto.resultHandler(response.response[session.key&&this.apiResultKey||'image'])):reject((response.response.error?response.response.error.message:response.response.status_txt)+' ('+response.response.status_code+')')}catch(e){reject(e)}else reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null,temporary=!1){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.setSession(!1).then(session=>Promise.all(urls.map(url=>verifyImageUrl(url).then(imageUrl=>{let formData=new URLSearchParams(Object.assign({action:'upload',type:'url',nsfw:0,thumb_width:200,
//thumb_height: 200,
format:'json'},session));return temporary&&formData.set('expiration','PT5M'),formData.set(session.key&&this.apiFieldName||'source',imageUrl),globalXHR(session.key?(this.apiEndpoint||this.origin+'/api/1')+'/upload':this.jsonEndpoint||this.origin+'/json',{responseType:'json',headers:{Referer:this.origin},timeout:urls.length*rehostTimeout},formData).then(({response:response})=>response.success?('function'==typeof progressHandler&&progressHandler(!0),Chevereto.resultHandler(response[session.key&&this.apiResultKey||'image'])):Promise.reject(`${this.alias||this.origin}: ${response.error.message} (${response.status_code})`))})))):Promise.reject('invalid argument')}static resultHandler(result){try{return{original:result.image&&result.image.url||result.url,thumb:result.thumb.url,share:result.url_viewer}}catch(e){return result.url}}galleryResolver(url){var albumId=/^\/(?:album|al)\/(\w+)\b/.test(url.pathname)&&RegExp.$1;return albumId?this.setSession(!0,!1).then(session=>{let formData=new URLSearchParams(Object.assign({action:'get-album-contents',albumid:albumId},session));return globalXHR(this.origin+'/json',{responseType:'json',headers:{Referer:url}},formData).then(({response:response})=>'OK'==response.status_txt&&Array.isArray(response.contents)?response.contents.map(image=>image.url):Promise.reject(`${this.alias||this.origin}: ${response.error.message} (${response.status_code})`))}).catch(reason=>(console.warn(this.alias||this.origin,'gallery couldn\'t be resolved via API:',reason,'(falling back to HTML parser)'),new Promise((resolve,reject)=>{var urls=[],domParser=new DOMParser;!function getPage(url){GM_xmlhttpRequest({method:'GET',url:url,headers:{Referer:url},onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));let dom=domParser.parseFromString(response.responseText,'text/html');Array.prototype.push.apply(urls,Array.from(dom.querySelectorAll('div.list-item-image > a.image-container')).map(a=>a.href));let next=dom.querySelector('a[data-pagination="next"][href]');null!=next&&next.href?getPage(next.href):resolve(urls)},onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}(url)}).then(urls=>Promise.all(urls.map(url=>imageUrlResolver(url)))))):Promise.reject('Invlaid gallery URL')}setSession(requireToken=!0,requireLogin=!1){let session={timestamp:Date.now()};return this.uid&&(session.login=this.uid),this.password&&(session.password=this.password),!this.apiKey||(session.key=this.apiKey,requireToken||requireLogin)?globalXHR(this.origin).then(response=>{if(/\b(?:auth_token)\s*=\s*"(\w+)"/m.test(response.responseText))var authToken=RegExp.$1;if(authToken||null!=(authToken=response.document.querySelector('input[name="auth_token"][value]'))&&(authToken=authToken.value),!authToken)return console.warn('Chevereto auth_token detection failure:',this.alias||this.origin,'\n\n',response.responseText),Promise.reject('auth_token detection failure');if(session.auth_token=authToken,getUser(response))return session;if(!this.configPrefix||!this.uid||!this.password)return requireLogin?Promise.reject('not logged in'):session;let payLoad=new URLSearchParams({'login-subject':this.uid,password:this.password,auth_token:session.auth_token});return globalXHR(this.origin+'/login',{headers:{Referer:this.origin+'/login'},responseType:'text'},payLoad).then(response=>getUser(response)?(console.debug(this.alias||this.origin,'login session:',session),session):Promise.reject('unknown reason')).catch(reason=>(console.warn('Chevereto login failed:',reason),requireLogin?Promise.reject('login failed ('+reason+')'):session));function getUser(response){if(/\b(?:logged_user)\s*=\s*(\{.*\});/.test(response.responseText))try{let logged_user=JSON.parse(RegExp.$1);return session.username=logged_user.username,session.userid=logged_user.id,Boolean(logged_user.username||logged_user.id)}catch(e){console.warn(e)}return!1}}):Promise.resolve(session)}}class PixHost{constructor(){this.alias='PixHost',this.origin='https://pixhost.to',this.types=['png','jpeg','gif'],this.sizeLimit=10}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="img"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="content_type"\r\n\r\n',formData+='0\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:'https://api.pixhost.to/images',responseType:'json',headers:{Accept:'application/json','Content-Type':'multipart/form-data; boundary='+boundary},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?resolve(PixHost.resultHandler(response.response)):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}))):Promise.reject('invalid argument')}rehost(urls){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.batchLimit&&urls.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):verifyImageUrls(urls).then(imageUrls=>{
//console.debug('rehost2PixHost(...) input:', imageUrls.join('\n'));
let formData=new URLSearchParams({imgs:imageUrls.join('\r\n'),content_type:0,tos:'on'});return globalXHR(this.origin+'/remote/',{responseType:'text',timeout:imageUrls.length*rehostTimeout},formData).then(response=>{if(!/\b(?:upload_results)\s*=\s*(\{.*\});$/m.test(response.responseText))return Promise.reject('page parsing error');let images=JSON.parse(RegExp.$1).images;return images.length<imageUrls.length?Promise.reject(`not all images rehosted (${images.length}/${imageUrls.length})`):(images.length>imageUrls.length&&console.warn('PixHost: server returns more results than expected:',images.length,imageUrls.length),Promise.all(images.map(PixHost.resultHandler)))})}):Promise.reject('invalid argument')}static resultHandler(result){try{return imageUrlResolver(result.show_url).then(imgUrl=>({original:imgUrl,thumb:result.th_url,share:result.show_url}))}catch(e){return Promise.reject(e)}}}class Catbox{constructor(){this.alias='Catbox',this.origin='https://catbox.moe',this.sizeLimit=200,void 0===(this.userHash=GM_getValue('catbox_userhash'))&&GM_setValue('catbox_userhash','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().catch(reason=>{}).then(userHash=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="reqtype"\r\n\r\n',formData+='fileupload\r\n',formData+='--'+boundary+'\r\n',userHash&&(formData+='Content-Disposition: form-data; name="userhash"\r\n\r\n',formData+=userHash+'\r\n',formData+='--'+boundary+'\r\n'),formData+='Content-Disposition: form-data; name="fileToUpload"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/user/api.php',responseType:'text',headers:{'Content-Type':'multipart/form-data; boundary='+boundary},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?resolve(response.responseText):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.setSession().catch(reason=>{}).then(userHash=>Promise.all(urls.map(url=>verifyImageUrl(url).then(imageUrl=>{let formData=new URLSearchParams({reqtype:'urlupload',url:imageUrl});return userHash&&formData.set('userhash',userHash),globalXHR(this.origin+'/user/api.php',{responseType:'text',timeout:urls.length*rehostTimeout},formData).then(response=>('function'==typeof progressHandler&&progressHandler(!0),response.responseText))})))):Promise.reject('invalid argument')}setSession(){return this.userHash?Promise.resolve(this.userHash):globalXHR(this.origin).then(response=>{var userHash=response.document.querySelector('input[name="userhash"][value]');return null==userHash?Promise.reject('userhash not configured; please log-in to Catbox.moe to autodetect it'):(this.userHash=userHash.value)?(GM_setValue('catbox_userhash',this.userHash),this.userHash):Promise.reject('assertion failed: empty userhash value')})}}class ImgBox{constructor(){this.alias='ImgBox',this.origin='https://imgbox.com',this.types=['jpeg','gif','png'],this.sizeLimit=10,void 0===(this.uid=GM_getValue('imgbox_uid'))&&GM_setValue('imgbox_uid',''),void 0===(this.password=GM_getValue('imgbox_password'))&&GM_setValue('imgbox_password','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';Object.keys(session.params).forEach((field,index,arr)=>{formData+='Content-Disposition: form-data; name="'+field+'"\r\n\r\n',formData+=session.params[field]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="files[]"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload/process',headers:{Accept:'application/json','Content-Type':'multipart/form-data; boundary='+boundary,'X-CSRF-Token':session.csrf_token},data:formData,responseType:'json',binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?resolve({original:response.response.files[0].original_url,thumb:response.response.files[0].thumbnail_url,share:response.response.files[0].url}):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}setSession(){return globalXHR(this.origin+'/').then(response=>{let csrfToken=response.document.querySelector('meta[name="csrf-token"]');if(null==csrfToken)return Promise.reject('ImgBox.com session token not found');if(console.debug('ImgBox.com session token:',csrfToken.content),null!=response.document.querySelector('div.btn-group > ul.dropdown-menu'))return csrfToken.content;if(!this.uid||!this.password)return csrfToken.content;let formData=new URLSearchParams({utf8:"✓",authenticity_token:csrfToken.content,"user[login]":this.uid,"user[password]":this.password});return GM_xmlhttpRequest({method:'POST',url:'https://imgbox.com/login',headers:{Referer:'https://imgbox.com/login','Content-Type':'application/x-www-form-urlencoded; charset=utf-8'},data:formData.toString()}),new Promise((resolve,reject)=>{setTimeout(()=>{globalXHR('http://imgbox.com/').then(response=>{null==response.document.querySelector('div.btn-group > ul.dropdown-menu')&&console.warn('ImgBox.com login failed, continuing as anonymous',response),null!=(csrfToken=response.document.querySelector('meta[name="csrf-token"]'))?(console.debug('ImgBox.com session token after login:',csrfToken.content),resolve(csrfToken.content)):reject('ImgBox.com session token not found')})},1e3)})}).then(csrfToken=>globalXHR(this.origin+'/ajax/token/generate',{method:'POST',responseType:'json',headers:{'X-CSRF-Token':csrfToken}}).then(({response:response})=>({csrf_token:csrfToken,params:{token_id:response.token_id,token_secret:response.token_secret,content_type:1,thumbnail_size:'150r',gallery_id:null,gallery_secret:null,comments_enabled:0}})))}}class Imgur{constructor(){this.alias='Imgur',this.origin='https://imgur.com',this.ulEndpoint='https://api.imgur.com/3/image',this.types=['jpeg','png','gif','apng','tiff','bmp','icf','webp']}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(clientId=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="type"\r\n\r\n',formData+='file\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="name"\r\n\r\n',formData+=image.name+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="image"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.ulEndpoint+'?client_id='+encodeURIComponent(clientId),responseType:'json',headers:{'Content-Type':'multipart/form-data; boundary='+boundary},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?response.response.success?resolve(this.resultHandler(response.response)):reject(response.response.status):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.setSession().then(clientId=>Promise.all(urls.map(url=>verifyImageUrl(url).then(imageUrl=>{let formData=new URLSearchParams({image:imageUrl,type:'URL'});return globalXHR(this.ulEndpoint+'?client_id='+encodeURIComponent(clientId),{responseType:'json',timeout:urls.length*rehostTimeout},formData).then(({response:response})=>response.success?('function'==typeof progressHandler&&progressHandler(!0),this.resultHandler(response)):Promise.reject(response.status))})))):Promise.reject('invalid argument')}setSession(){return sessionStorage.imgurClientId?Promise.resolve(sessionStorage.imgurClientId):globalXHR(this.origin).then(({document:document})=>{let jsMain=document.querySelector('body > script:last-of-type');return null!=jsMain&&jsMain.src.includes('/desktop-assets/js/main.')?globalXHR(jsMain.src,{responseType:'text'}).then(({responseText:responseText})=>{let clientId=/\b[a-z]="([a-z\d]{15})"/.exec(responseText);return null==clientId?Promise.reject('client id extraction failed'):(sessionStorage.imgurClientId=clientId[1],clientId[1])}):Promise.reject('/js/main not located')})}resultHandler(result){return{original:result.data.link,thumb:result.data.link.replace(/(?=\.\w+$)/,'t'),share:this.origin+'/'+result.data.id}}}class PostImage{constructor(){this.alias='PostImage',this.origin='https://postimages.org',this.sizeLimit=24,void 0===(this.uid=GM_getValue('postimg_uid'))&&GM_setValue('postimg_uid',''),void 0===(this.password=GM_getValue('postimg_password'))&&GM_setValue('postimg_password','')}upload(images,progressHandler=null){return Array.isArray(images)?images.length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n',payLoad=Object.assign({numfiles:images.length,optsize:0,expire:0},session);Object.keys(payLoad).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=payLoad[key]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="file"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/json/rr',responseType:'json',headers:{Accept:'application/json','Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));'OK'==response.response.status?resolve(response.response.url):reject(response.response.error)},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}))).then(PostImage.resultsHandler)):Promise.reject('invalid argument')}rehost(urls,progressHandler=null,temporary=!1){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.setSession().then(session=>Promise.all(urls.map(url=>verifyImageUrl(url).then(imageUrl=>{let formData=new URLSearchParams(Object.assign({url:imageUrl,numfiles:urls.length,optsize:0,expire:0},session));return temporary&&formData.set('expire',1),globalXHR(this.origin+'/json/rr',{responseType:'json',timeout:urls.length*rehostTimeout},formData).then(({response:response})=>'OK'!=response.status?Promise.reject(response.error):('function'==typeof progressHandler&&progressHandler(!0),response.url))}))).then(PostImage.resultsHandler)):Promise.reject('invalid argument')}static resultsHandler(urls){const imgBase='https://i.postimg.cc/';return Promise.all(urls.map(url=>globalXHR(url).then(response=>{try{let embed_value=/\b(?:embed_value)=(\{.+?\});/.exec(response.responseText);if(null==embed_value)throw'no embed_value';var results1=Object.keys(embed_value=JSON.parse(embed_value[1])).map(key=>({original:imgBase+embed_value[key][2]+'/'+embed_value[key][0]+'.'+embed_value[key][1],thumb:imgBase+key+'/'+embed_value[key][0]+'.'+embed_value[key][1],share:"https://postimg.cc/"+key}))}catch(e){results1=void 0}try{var results2=Array.from(response.document.querySelectorAll('div#thumb-list > div.thumb-container')).map(div=>({original:imgBase+div.dataset.hotlink+'/'+div.dataset.name+'.'+div.dataset.ext,thumb:imgBase+div.dataset.image+'/'+div.dataset.name+'.'+div.dataset.ext,share:"https://postimg.cc/"+div.dataset.image}))}catch(e){results2=void 0}if(Array.isArray(results1)&&results1.length>0)return results1;if(Array.isArray(results2)&&results2.length>0)return results2;let result={thumb:'input#code_web_thumb',share:'input#code_html'};for(let key in result)try{result[key]=response.document.querySelector(result[key]).value.trim()}catch(e){console.error(e,result[key]),result[key]=void 0}return result.share?globalXHR(result.share).then((function({document:document}){return result.original=document.querySelector('a#download'),null==result.original?Promise.reject('PostImage: full image not found'):(result.original=result.original.origin+result.original.pathname,result.thumb&&(result.thumb=/\b(?:src)='(.*?)'/i.exec(result.thumb)||/\b(?:src)="(.*?)"/i.exec(result.thumb)),result.thumb=result.thumb?result.thumb[1]:void 0,[result])})):Promise.reject('PostImage: share page link not found')}))).then(r=>r.flatten())}setSession(){let session={session_upload:Date.now(),upload_session:randomString(32),upload_referer:btoa(this.origin+'/')};return globalXHR(this.origin).then(response=>(null!=(session.token=/"token"\s*,\s*"(\w+)"/.exec(response.responseText))&&(session.token=session.token[1]),null==response.document.querySelector('nav.authorized')&&this.uid&&this.password?globalXHR(this.origin+'/login').then(response=>{let csrfHash=response.document.querySelector('input[name="csrf_hash"][value]');if(null==csrfHash)return console.warn('postImage: csrf hash not found'),response;let payLoad=new URLSearchParams({email:this.uid,password:this.password,csrf_hash:csrfHash.value});return globalXHR(this.origin+'/login',{headers:{Referer:this.origin+'/login'}},payLoad)}):response)).then(response=>(null!=(session.user=response.document.querySelector('nav.authorized a > i.fa-user'))&&(session.user=session.user.nextSibling.textContent.trim()),session))}}class ImageVenue{constructor(){this.alias='ImageVenue',this.origin='https://www.imagevenue.com',this.types=['jpeg','png','gif'],void 0===(this.uid=GM_getValue('imagevenue_uid'))&&GM_setValue('imagevenue_uid',''),void 0===(this.password=GM_getValue('imagevenue_password'))&&GM_setValue('imagevenue_password','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.batchLimit&&images.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):this.setSession().then(session=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';Object.keys(session).forEach((field,index,arr)=>{formData+='Content-Disposition: form-data; name="'+field+'"\r\n\r\n',formData+=session[field]+'\r\n',formData+='--'+boundary+'\r\n'}),images.forEach((image,index,arr)=>{formData+='Content-Disposition: form-data; name="files['+index+']"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary,index+1>=arr.length&&(formData+='--'),formData+='\r\n'}),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload',headers:{Accept:'application/json','Content-Type':'multipart/form-data; boundary='+boundary},data:formData,responseType:'json',binary:!0,timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));resolve(response.response.success)},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})).then(resultUrl=>globalXHR(resultUrl)).then(response=>{let thumbs=response.document.querySelectorAll('div.row > div > a > img');return Promise.all(Array.from(thumbs).map(img=>imageUrlResolver(img.parentNode.href).then(imgUrl=>({original:imgUrl,thumb:img.src,share:img.parentNode.href}))))}):Promise.reject('invalid argument')}setSession(){return globalXHR(this.origin+'/').then(response=>{let csrfToken=response.document.querySelector('meta[name="csrf-token"]');if(null==csrfToken)return Promise.reject('ImageVenue.com session token not found');if(console.debug('ImageVenue.com session token:',csrfToken.content),null!=response.document.getElementById('navbarDropdown'))return csrfToken.content;if(!this.uid||!this.password)return csrfToken.content;let formData=new URLSearchParams({_token:csrfToken.content,email:this.uid,password:this.password});return GM_xmlhttpRequest({method:'POST',url:this.origin+'/auth/login',headers:{Referer:this.origin+'/auth/login','Content-Type':'application/x-www-form-urlencoded; charset=utf-8'},data:formData.toString()}),new Promise((resolve,reject)=>{setTimeout(()=>{globalXHR(this.origin+'/').then(response=>{null==response.document.getElementById('navbarDropdown')&&console.warn('ImageVenue.com login failed, continuing as anonymous',response),null!=(csrfToken=response.document.querySelector('meta[name="csrf-token"]'))?(console.debug('ImageVenue.com session token after login:',csrfToken.content),resolve(csrfToken.content)):reject('ImageVenue.com session token not found')})},1e3)})}).then(csrfToken=>globalXHR(this.origin+'/upload/session',{responseType:'json',headers:{'X-CSRF-TOKEN':csrfToken}},new URLSearchParams({thumbnail_size:2,content_type:'sfw',comments_enabled:!1})).then(({response:response})=>({data:response.data,_token:csrfToken})))}}class FastPic{constructor(){this.alias='FastPic',this.origin='https://fastpic.ru',this.types=['jpeg','png','gif'],this.sizeLimit=25,this.batchLimit=30}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.batchLimit&&images.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';images.forEach(image=>{formData+='Content-Disposition: form-data; name="file[]"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="uploading"\r\n\r\n',formData+='1\r\n',formData+='--'+boundary+'--\r\n',GM_xmlhttpRequest({method:'POST',url:this.origin+'/uploadmulti',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));/^\s*(?:Refresh)\s*:\s*(\d+);url=(\S+)\s*$/im.test(response.responseHeaders)?resolve(RegExp.$2):(console.warn('FastPic.ru invalid response header:',response.responseHeaders),reject('invalid response header'))},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}).then(resultUrl=>globalXHR(resultUrl).then(response=>{let thumbs=Array.from(response.document.querySelectorAll('div.picinfo > div.dCenter > a > img')).map(img=>img.src);return Promise.all(Array.from(response.document.querySelectorAll('ul.codes-list > li:first-of-type > input')).map((input,index)=>globalXHR(input.value).then(response=>({original:response.document.querySelector('img.image').src,thumb:thumbs[index],share:response.finalUrl}))))})):Promise.reject('invalid argument')}}class NWCD{constructor(){this.alias='NotWhatCd',this.whitelist=['notwhat.cd'],this.types=['jpeg','png','gif'],this.sizeLimit=5,this.upload.acceptFiles=!0}upload(files){return Array.isArray(files)?(files=files.filter(file=>isSupportedType.call(this,file)&&(!(this.sizeLimit>0)||!file.size||file.size<=this.sizeLimit*2**20))).length<=0?Promise.reject('nothing to upload'):NWCD.loadJS().then(upload=>Promise.all(files.map(upload)).then(results=>results.map(result=>result.url||Promise.reject('site image uploader returned void result')))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):NWCD.loadJS().then(upload=>Promise.all(urls.map(url=>verifyImageUrl(url).then(upload).then(result=>('function'==typeof progressHandler&&progressHandler(!0),result.url||Promise.reject('site image uploader returned void result')))))):Promise.reject('invalid argument')}static loadJS(){return'notwhat.cd'!=document.domain?Promise.reject('uploadToImagehost not available'):'function'==typeof uploadToImagehost?Promise.resolve(uploadToImagehost):new Promise((resolve,reject)=>{let imageUpload=document.createElement('script');imageUpload.type='text/javascript',imageUpload.src='/static/functions/image_upload.js',imageUpload.onload=evt=>{'function'==typeof uploadToImagehost?resolve(uploadToImagehost):reject('uploadToImagehost() not loaded');// assertion fail
},imageUpload.onerror=evt=>{reject('Script load error: '+evt.message)},document.head.append(imageUpload)})}}class Abload{constructor(){this.alias='Abload',this.origin='https://abload.de',this.types=['bmp','bmp2','bmp3','gif','jpeg','png'],this.sizeLimit=10,this.batchLimit=20,void 0===(this.uid=GM_getValue('abload_uid'))&&GM_setValue('abload_uid',''),void 0===(this.password=GM_getValue('abload_password'))&&GM_setValue('abload_password','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let id='o_'+(index+1).toString().padStart(2,'0')+randomString(28).toLowerCase(),params={name:id,// + image.type.replace('image/', '.'),
chunk:0,chunks:1},formData='--'+boundary+'\r\n';Object.keys(params).forEach(field=>{formData+='Content-Disposition: form-data; name="'+field+'"\r\n\r\n',formData+=params[field]+'\r\n',formData+='--'+boundary+'\r\n'}),Object.keys(session).forEach(field=>{formData+='Content-Disposition: form-data; name="'+field+'"\r\n\r\n',formData+=session[field]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="file"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:'https://'+session.server+'.abload.de/calls/newUpload.php',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin+'/'},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?resolve({id:id,name:image.name}):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}))).then(uploadMapping=>{let formData=new URLSearchParams(Object.assign({},session,{resize:'none',rules:'on',gallery:'',upload_mapping:JSON.stringify(uploadMapping).replace(/"/g,'\\"')}));return globalXHR('https://'+session.server+'.abload.de/flashUploadFinished.php?server='+session.server,{headers:{Referer:this.origin+'/'}},formData).then(Abload.resolveRedirect)})):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.batchLimit&&urls.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):this.setSession().then(session=>verifyImageUrls(urls).then(imageUrls=>{let formData={};return imageUrls.forEach((imageUrl,index)=>{formData['img'+index]=imageUrl}),formData=new URLSearchParams(Object.assign(formData,session,{resize:'none',rules:'on',gallery:'',upload_mapping:JSON.stringify([])})),globalXHR('https://'+session.server+'.abload.de/flashUploadFinished.php?server='+session.server,{headers:{Referer:this.origin+'/'},timeout:imageUrls.length*rehostTimeout},formData).then(Abload.resolveRedirect)})):Promise.reject('invalid argument')}static resolveRedirect(response){let form=response.document.querySelector('form#weiter');if(null==form)return Promise.reject(response.responseText);let formData=new FormData(form);return formData=new URLSearchParams(formData),globalXHR(form.action,{headers:{Referer:response.finalUrl}},formData).then(response=>Array.from(response.document.querySelectorAll('table.image_links > tbody > tr > td > input[type="text"]')).filter(input=>httpParser.test(input.value)&&input.parentNode.previousElementSibling.textContent.startsWith('Dire')).map(input=>({original:input.value.trim(),thumb:input.value.trim().replace('/img/','/thumb/'),share:input.value.trim().replace('/img/','/image.php?img=')})))}setSession(){return globalXHR(this.origin).then(response=>{var session={userID:function(length){let text="";for(let i=0;i<length;++i)text+="abcdefABCDEF0123456789".charAt(Math.floor(Math.random()*"abcdefABCDEF0123456789".length));return text}(32)};if(!/^(?:Server)\s*:\s*(?:Abload)\s+(\w+)\b/im.test(response.responseHeaders))return Promise.reject('Invalid response header');if(session.server=RegExp.$1,/\b(?:user_logged_in)\s*=\s*true\b/.test(response.responseText))return session;if(!this.uid||!this.password)return session;let formData=new URLSearchParams({name:this.uid,password:this.password});return globalXHR(this.origin+'/login.php',{method:'HEAD',headers:{Referer:this.origin}},formData).catch(reason=>{console.warn(reason)}).then(response=>session)})}}class Radikal{constructor(){this.alias='Radikal',this.origin='https://radikal.ru',this.sizeLimit=40,void 0===(this.uid=GM_getValue('radikal_uid'))&&GM_setValue('radikal_uid',''),void 0===(this.password=GM_getValue('radikal_password'))&&GM_setValue('radikal_password','')}upload(images,progressHandler=null){return Array.isArray(images)?images.length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n',params={OriginalFileName:image.name,MaxSize:99999,PrevMaxSize:500,IsPublic:!1,NeedResize:!1,Rotate:0,RotateMetadataRelative:!1};Object.keys(params).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=params[key]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="File"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/Img/SaveImg2',responseType:'json',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin+'/',Cookie:'USER_ID='+session.Id||''},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>response.status<200||response.status>=400?reject(defaultErrorHandler(response)):response.response.IsError?reject(`${response.response.ErrorSrvMsg} (${response.response.Errors._allerrors_.join(' / ')})`):void resolve({original:response.response.Url,thumb:response.response.PublicPrevUrl,share:response.response.PrevPageUrl}),onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.setSession().then(session=>Promise.all(urls.map(url=>verifyImageUrl(url).then(imageUrl=>{let formData=new URLSearchParams({OriginalFileName:imageUrl,MaxSize:99999,PrevMaxSize:500,IsPublic:!1,NeedResize:!1,Rotate:0,RotateMetadataRelative:!1,Url:imageUrl});return globalXHR(this.origin+'/Img/SaveImg2',{responseType:'json',headers:{Referer:this.origin},cookie:'USER_ID='+session.Id||'',timeout:urls.length*rehostTimeout},formData).then(({response:response})=>response.IsError?Promise.reject(`${response.ErrorSrvMsg} (${response.Errors._allerrors_.join(' / ')})`):('function'==typeof progressHandler&&progressHandler(!0),{original:response.Url,thumb:response.PublicPrevUrl,share:response.PrevPageUrl}))})))):Promise.reject('invalid argument')}setSession(){return globalXHR(this.origin,{responseType:'text'}).then(response=>{let session=getUserInfo(response);if(!session)return Promise.reject('Invalida page format');if(!session.IsAnonym)return session;if(!this.uid||!this.password)return session;let formData=new URLSearchParams({Login:this.uid,Password:this.password,IsRemember:!1,ReturnUrl:'/'});return globalXHR(this.origin+'/Auth/Login',{responseType:'json',headers:{Referer:this.origin}},formData).then(({response:response})=>response.IsError?session:globalXHR(this.origin,{responseType:'text'}).then(response=>getUserInfo(response)||session),reason=>{console.warn(reason)})});function getUserInfo(response){if(/\b(?:var\s+serverVm)\s*=\s*(\{.*\});$/m.test(response.responseText))try{return JSON.parse(RegExp.$1).CommonUserData}catch(e){console.warn(e)}return null}}}class SVGshare{constructor(){this.alias='SVGshare',this.origin='https://svgshare.com',this.types=['svg+xml']}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(submitUrl=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n',params={name:image.name,submit:'Share'};Object.keys(params).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=params[key]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="file"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:submitUrl,headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,fetch:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));(new DOMParser).parseFromString(response.responseText,'text/html').querySelectorAll('ul#shares > li > input[type="text"]').forEach(input=>{/^(?:https?:\/\/.+\.svg)$/.test(input.value)&&resolve(input.value)}),reject('image URL could not be found')},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}setSession(){return globalXHR(this.origin).then(response=>{let form=response.document.getElementById('filereader');return null!=form&&form.action||Promise.reject('Invalid document format')})}}class GeekPic{constructor(){this.alias='GeekPic',this.origin='https://geekpic.net'}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="file"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/ajax.php?PHPSESSID='+randomString(26).toLowerCase(),headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,responseType:'json',timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>response.status<200||response.status>=400?reject(defaultErrorHandler(response)):response.response.success?void resolve(this.origin+response.response.img):reject(response.response.msg),onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}).then(imageUrlResolver))):Promise.reject('invalid argument')}}class LightShot{constructor(){this.alias='LightShot',this.origin='https://prntscr.com'}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(userInfo=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="image"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload.php',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,responseType:'json',timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));'success'==response.response.status?resolve(response.response.data):reject(response.response.status)},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}).then(imageUrlResolver)))):Promise.reject('invalid argument')}setSession(){return globalXHR('https://api.prntscr.com/v1/',{responseType:'json'},JSON.stringify({id:1,jsonrpc:'2.0',method:'get_userinfo',params:{}})).then(({response:response})=>(response.result.success,response.result))}}class ImageBan{constructor(){this.alias='ImageBan',this.origin='https://imageban.ru',this.types=['jpeg','png','gif','webp'],this.sizeLimit=10,this.batchLimit=100}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="Filedata"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/up',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,responseType:'json',timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>response.status<200||response.status>=400?reject(defaultErrorHandler(response)):response.response.files[0].error?reject(response.response.files[0].error):void resolve({original:response.response.files[0].link,thumb:response.response.files[0].thumbs,share:response.response.files[0].piclink}),onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.batchLimit&&urls.length>this.batchLimit?Promise.reject(`batch limit exceeded (${this.batchLimit})`):this.setSession().then(session=>verifyImageUrls(urls).then(imageUrls=>{let formData=new URLSearchParams(Object.assign({u_url:imageUrls.join('\n')},session));return globalXHR(this.origin+'/urlup',{headers:{Referer:this.origin},timeout:imageUrls.length*rehostTimeout},formData).then(response=>Array.from(response.document.querySelectorAll('div.container > div[align="left"] ~ div.row')).map(row=>({original:row.querySelector('div.input-group > input[id^="g"]').value,thumb:row.querySelector(':scope > a > img').src,share:row.querySelector('div.input-group > input[id^="a"]').value})))})):Promise.reject('invalid argument')}setSession(){return Promise.resolve({})}}class PicaBox{constructor(){this.alias='PicaBox',this.origin='https://picabox.ru'}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';Object.keys(session).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=session[key]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="ImagesForm[imageFiles][]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/image/load',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin+'/image/load'},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),fetch:!0,cookie:'_csrf='+session._csrf,onload:response=>{response.status>=200&&response.status<400?resolve(this.extractLinks(response)):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}).then(results=>results[0])))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.batchLimit&&urls.length>this.batchLimit?Promise.reject(`batch limit exceeded (${this.batchLimit})`):this.setSession().then(session=>Promise.all(urls.map(url=>verifyImageUrl(url).then(imageUrl=>{let formData=new URLSearchParams(session);return formData.set('ImagesForm[file_url]',imageUrl),globalXHR(this.origin+'/image/load',{responseType:'text',fetch:!0,headers:{Referer:this.origin+'/image/load'},timeout:urls.length*rehostTimeout,cookie:'_csrf='+session._csrf},formData).then(PicaBox.prototype.extractLinks.bind(this)).then(results=>('function'==typeof progressHandler&&progressHandler(!0),results[0]))})))):Promise.reject('invalid argument')}extractLinks(response){let domParser=new DOMParser;return Promise.all(Array.from(domParser.parseFromString(response.responseText,'text/html').querySelectorAll('input[name="url"]')).map(input=>imageUrlResolver(input.value).then(imgUrl=>({original:imgUrl,thumb:this.origin+'/img_small/'+input.value.replace(/^.*\//,''),share:input.value}))))}setSession(){return globalXHR(this.origin+'/image/load').then(response=>{let formData=response.document.querySelector('form[name="form_image"]');if(null==formData)return Promise.reject('Invalid document format');formData=new FormData(formData);let session={};formData.entries();for(let[key,val]of formData)session[key]=val;return['ImagesForm[file_url]','ImagesForm[imageFiles][]','imagesform-text_color-source'].forEach(key=>{delete session[key]}),session})}}class PimpAndHost{constructor(){this.alias='PimpAndHost',this.origin='https://pimpandhost.com',this.types=['jpeg','png','gif'],this.sizeLimit=4.8828125,this.batchLimit=100}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n',params={fileId:`${index.toString().padStart(3,'0')}_${session.albumId}`,albumId:session.albumId};Object.keys(params).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=params[key]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="files"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/image/upload-file',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin+'/album/'+session.albumId,'X-CSRF-Token':session['csrf-token']},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),responseType:'json',onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));resolve({original:'https:'+response.response.files[0].image[0],thumb:'https:'+response.response.files[0].image[180],share:response.response.files[0].pageUrl})},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.batchLimit&&urls.length>this.batchLimit?Promise.reject(`batch limit exceeded (${this.batchLimit})`):this.setSession().then(session=>Promise.all(urls.map((url,index)=>(()=>['png','jpg','jpeg','jfif','gif'].some(ext=>url.toLowerCase().endsWith('.'+ext))?verifyImageUrl(url):imageHostHandlers.imgbb.rehost([url]).then(imgUrls=>imgUrls[0]).catch(reason=>imageHostHandlers.jerking.rehost([url]).then(imgUrls=>imgUrls[0])).catch(reason=>imageHostHandlers.pixhost.rehost([url]).then(imgUrls=>imgUrls[0])))().then(imageUrl=>{let formData=new URLSearchParams({url:imageUrl,field:`${index.toString().padStart(3,'0')}_${session.albumId}`,albumId:session.albumId});return globalXHR(this.origin+'/image/upload-by-url',{responseType:'json',headers:{Referer:this.origin+'/album/'+session.albumId,'X-CSRF-Token':session['csrf-token']},timeout:urls.length*rehostTimeout},formData).then(({response:response})=>'ok'!=response.status?Promise.reject(response.message):response.file.error?Promise.reject(response.file.error.title):('function'==typeof progressHandler&&progressHandler(!0),{original:'https:'+response.file.image[0],thumb:'https:'+response.file.image[180],share:response.file.pageUrl}))})))):Promise.reject('invalid argument')}setSession(){return globalXHR(this.origin).then(response=>{let meta=response.document.querySelector('meta[name="csrf-token"][content]');if(null==meta)return Promise.reject('Invalid document structure');let session={'csrf-token':meta.content};return globalXHR(this.origin+'/album/create-by-uploading',{headers:{'X-CSRF-Token':session['csrf-token']},responseType:'json'}).then(({response:response})=>(session.albumId=response.albumId,session))})}}class ScreenCast{constructor(){this.alias='ScreenCast',this.origin='https://www.screencast.com'}upload(images,progressHandler=null){}rehost(urls,progressHandler=null){}setSession(){}}class GoogleAPI{constructor(scope){this.origin='https://www.googleapis.com',this.clientId='241768952066-r0pojdg0l8m4nqr31psf8rb01btt43c4.apps.googleusercontent.com',this.apiKey='lk9MZc7eSYzi6tDQ-H6jeC-2',this.scope=scope}setSession(){return this.isTokenValid()?Promise.resolve(this.token):(this.auth?Promise.resolve(this.auth):('object'==typeof gapi?Promise.resolve(gapi):new Promise((resolve,reject)=>{let gApi=document.createElement('script');gApi.type='text/javascript',gApi.src='https://apis.google.com/js/api.js',gApi.onload=evt=>{'object'==typeof gapi?resolve(gapi):reject('Google API loading error')},gApi.onerror=evt=>{reject('Script load error: '+evt.message)},document.head.append(gApi)})).then(gapi=>new Promise((resolve,reject)=>gapi.load('client:auth2',{callback:()=>{gapi.client.init({clientId:this.clientId,
//apiKey: this.apiKey,
scope:this.scope,discoveryDocs:['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']}).then(()=>{resolve(this.auth=gapi.auth2.getAuthInstance())},error=>reject(JSON.stringify(error)))},onerror:()=>{reject('Google API loading error')}})))).then(auth=>auth.isSignedIn.get()?auth.currentUser.get():auth.signIn().catch(e=>Promise.reject(e.error))).then(user=>this.token=gapi.client.getToken())}isTokenValid(){if(!this.token||'object'!=typeof this.token||!this.token.token_type||!this.token.access_token)return!1;let now=new Date;return this.token.expires_at>=now.getTime()+6e4*now.getTimezoneOffset()+3e4}}class GoogleDrive extends GoogleAPI{constructor(){super('https://www.googleapis.com/auth/drive.file'),this.alias='GoogleDrive'}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(token=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n',metadata={name:image.name,mimeType:image.type};formData+='Content-Disposition: form-data; name="metadata"\r\n',formData+='Content-Type: application/json; charset=UTF-8\r\n\r\n',formData+=JSON.stringify(metadata)+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="file"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload/drive/v3/files?uploadType=multipart&fields=id,webContentLink',headers:{'Content-Type':'multipart/related; boundary='+boundary,Authorization:token.token_type+' '+token.access_token},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),responseType:'json',onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));gapi.client.drive.permissions.create({fileId:response.response.id,resource:{role:'reader',type:'anyone'}}).execute(result=>{'anyoneWithLink'==result.id?resolve(response.response.webContentLink.replace(/&.*$/i,'')):reject('failed to enable sharing for this file')},error=>{reject(JSON.stringify(error))})},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}}class GooglePhotos extends GoogleAPI{constructor(){super('https://www.googleapis.com/auth/photoslibrary.sharing'),this.alias='GooglePhotos'}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(token=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{if(this.sizeLimit>0&&image.size>this.sizeLimit*2**20)throw'size limit exceeded: '+image.name;Date.now().toString(16).toUpperCase();
// TODO
})))):Promise.reject('invalid argument')}}class DropBox{constructor(){this.alias='DropBox',this.origin='https://www.dropbox.com'}upload(images,progressHandler=null){}rehost(urls,progressHandler=null){}setSession(){}}class OneDrive{constructor(){this.alias='OneDrive',this.origin='https://onedrive.live.com'}upload(images,progressHandler=null){}rehost(urls,progressHandler=null){}setSession(){}}class VgyMe{constructor(){this.alias='Vgy.me',this.origin='https://vgy.me',this.types=['jpeg','png','gif'],this.sizeLimit=20,void 0===(this.userKey=GM_getValue('vgyme_user_key'))&&GM_setValue('vgyme_user_key','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(userKey=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';images.forEach((image,index)=>{formData+='Content-Disposition: form-data; name="file['+index+']"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="userkey"\r\n\r\n',formData+=userKey+'\r\n',formData+='--'+boundary+'--\r\n',GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,responseType:'json',timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));if(response.response.error)reject('Error');else{if(Array.isArray(response.response.upload_list))return resolve(response.response.upload_list);if(response.response.image)return resolve([response.response.image]);reject('Invalid response')}},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})):Promise.reject('invalid argument')}setSession(){return this.userKey?Promise.resolve(this.userKey):Promise.reject('user key not configured (https://vgy.me/account/details#userkeys)')}}class ImgURL{constructor(){this.alias='ImgURL',this.origin='https://www.png8.com',
//this.origin = 'https://imgurl.org';
this.types=['jpeg','png','gif','bmp']}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="file"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload/localhost',
//url: this.origin + '/upload/ftp',
headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,responseType:'json',timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>response.status<200||response.status>=400?reject(defaultErrorHandler(response)):200!=response.response.code?reject('status: '+response.response.code):void resolve({original:response.response.url,thumb:response.response.thumbnail_url,share:this.origin+'/img/'+response.response.imgid}),onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}setSession(){return Promise.resolve({})}}class Slowpoke{constructor(){this.alias='Slowpoke',this.origin='https://slow.pics',
//this.types = ['jpeg', 'png', 'gif', 'bmp'];
void 0===(this.uid=GM_getValue('slowpoke_uid'))&&GM_setValue('slowpoke_uid',''),void 0===(this.password=GM_getValue('slowpoke_password'))&&GM_setValue('slowpoke_password','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.batchLimit&&images.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):this.setSession().then(csrfToken=>new Promise((resolve,reject)=>{const now=Date.now(),boundary='--------WebKitFormBoundary-'+now.toString(16).toUpperCase();let formData='--'+boundary+'\r\n',params={collectionName:new Date(now).toISOString(),public:!1,thumbnailSize:180};Object.keys(params).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=params[key]+'\r\n',formData+='--'+boundary+'\r\n'}),images.forEach((image,index)=>{formData+='Content-Disposition: form-data; name="images['+index+'].name"\r\n\r\n',formData+=image.name+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="images['+index+'].file"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary,index>=images.length-1&&(formData+='--'),formData+='\r\n'}),GM_xmlhttpRequest({method:'POST',url:this.origin+'/api/collection',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin,'X-XSRF-TOKEN':csrfToken},data:formData,binary:!0,responseType:'text',timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));let shareUrl=this.origin+'/c/'+response.responseText;console.log('Slowpoke upload gallery link:',shareUrl),imageUrlResolver(shareUrl).then(result=>resolve(Array.isArray(result)?result:[result]))},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})):Promise.reject('invalid argument')}setSession(){return globalXHR(this.origin+'/login').then(response=>{if(response.finalUrl.includes(this.origin))return response;if(!this.uid||!this.password)return globalXHR(this.origin);let token=response.document.querySelector('input[name="_csrf"][value]');return null==token?Promise.reject('invlid page structure'):new Promise((resolve,reject)=>{let formData=new URLSearchParams({_csrf:token.value,username:this.uid,password:this.password});GM_xmlhttpRequest({method:'POST',url:response.finalUrl,headers:{'Content-Type':'application/x-www-form-urlencoded'},data:formData.toString(),onload:response=>{['my','exit'].some(p=>response.finalUrl.endsWith('/'+p))?(console.log('Slowpoke successfull login:',response.finalUrl),resolve(globalXHR(this.origin+'/login'))):response.finalUrl.endsWith('/login?credentials')?reject('invalid userid or password'):(console.warn('Slowpoke unhandled redirect:',response),reject('unexpected redirect: '+response.finalUrl))},onerror:response=>{reject(defaultErrorHandler(response))}})}).catch(reason=>(console.warn('Slowpoke login failed:',reason),globalXHR(this.origin)))}).then(response=>{let token=response.document.querySelector('input[name="_csrf"][value]');return null!=token?token.value:Promise.reject('invlid page structure ('+response.finalUrl+')')})}}class FunkyIMG{constructor(){this.alias='FunkyIMG',this.origin='https://funkyimg.com',this.sizeLimit=4,this.types=['jpeg','png','gif','bmp','tiff'],void 0===(this.uid=GM_getValue('funkyimg_uid'))&&GM_setValue('funkyimg_uid',''),void 0===(this.password=GM_getValue('funkyimg_password'))&&GM_setValue('funkyimg_password','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n',params={_images:image.name,wmText:'',wmPos:'TOPRIGHT',wmLayout:2,wmFontSize:14,wmTransparency:50,addInfoType:'res',labelText:''};Object.keys(params).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=params[key]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="images"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload/?'+session,headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),responseType:'json',onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));response.response.success?resolve(this.resultHandler(response.response.jid)):reject('failure')},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.batchLimit&&urls.length>this.batchLimit?Promise.reject(`batch limit exceeded (${this.batchLimit})`):this.setSession().then(session=>Promise.all(urls.map(url=>verifyImageUrl(url).then(imageUrl=>{let formData=new URLSearchParams({url:imageUrl,wmText:'',wmPos:'TOPRIGHT',wmLayout:2,wmFontSize:14,wmTransparency:50,addInfoType:'res',labelText:''});return globalXHR(this.origin+'/upload/?'+session,{responseType:'json',headers:{Referer:this.origin},timeout:urls.length*rehostTimeout},formData).then(({response:response})=>response.success?this.resultHandler(response.jid):Promise.reject('failure'))})))):Promise.reject('invalid argument')}resultHandler(jid){return new Promise((resolve,reject)=>{
//let queries = 0;
(function check(){globalXHR(this.origin+'/upload/check/'+jid+'?_='+Date.now(),{headers:{Referer:this.origin},responseType:'json'}).then(({response:response})=>{
//++queries;
if(response.success)try{
//console.debug('FunkyIMG queries to success:', queries, jid);
let dom=domParser.parseFromString(response.bit,'text/html'),result={original:'ul > li:nth-of-type(2) > input',thumb:'ul > li:nth-of-type(2) > input',share:'ul > li:nth-of-type(1) > input'};Object.keys(result).forEach(key=>{result[key]=dom.querySelector(result[key]).value.trim()}),result.thumb=result.thumb.replace('/i/','/p/'),resolve(result)}catch(e){reject('unexpected response: '+e)}else setTimeout(check.bind(this),200)},reject)}).call(this)})}setSession(){return globalXHR(this.origin).then(response=>{let loggedUser=response.document.querySelector('div.inner > span.welcome > b');if(null==loggedUser||'none'!=loggedUser.parentNode.style.display||!this.uid||!this.password)return Promise.resolve(response);let params=new URLSearchParams({s:'',act:'Login',CODE:'01'}),formData=new URLSearchParams({referer:this.origin+'/',UserName:this.uid,PassWord:this.password});return globalXHR('https://forum.funkysouls.org/index.php?'+params,{headers:{Referer:this.origin}},formData)}).then(response=>{let loggedUser=response.document.querySelector('div.inner > span.welcome > b');return loggedUser=null!=loggedUser&&'none'!=loggedUser.parentNode.style.display?loggedUser.textContent.trim():void 0,'fileapi'+Date.now()})}}class Gett{constructor(){this.alias='Ge.tt',this.origin='http://api.ge.tt',
//this.sizeLimit = 4;
//this.types = ['jpeg', 'png', 'gif', 'bmp', 'tiff'];
void 0===(this.uid=GM_getValue('gett_uid'))&&GM_setValue('gett_uid',''),void 0===(this.password=GM_getValue('gett_password'))&&GM_setValue('gett_password',''),
//if ((this.apiKey = GM_getValue('gett_apikey')) === undefined) GM_setValue('gett_apikey', '');
this.apiKey='t3bhhhlzg7lb78c0wimxjx4unmihwv6l93n150esdz15anka9k9'}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0||images.length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>{const auth='accesstoken='+encodeURIComponent(session.accesstoken);return globalXHR(this.origin+'/1/shares/create?'+auth,{method:'POST',responseType:'json'}).then(({response:response})=>Promise.all(images.map((image,index)=>globalXHR(this.origin+'/1/files/'+response.sharename+'/create?'+auth,{responseType:'json'},{filename:image.name,size:image.size,type:image.type}).then(({response:response})=>response).then(file=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="'+file.fileid+'"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:file.upload.posturl,headers:{'Content-Type':'multipart/form-data; boundary='+boundary},data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?resolve(file):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})).then(file=>{let result={original:this.origin+'/1/files/'+file.sharename+'/'+file.fileid+'/blob',thumb:this.origin+'/1/files/'+file.sharename+'/'+file.fileid+'/blob/thumb',share:file.getturl};const url=this.origin+'/1/files/'+file.sharename+'/'+file.fileid+'/blob?download&referrer='+encodeURIComponent(session.user.userid);return globalXHR(url,{method:'HEAD',headers:{Referer:this.origin+'/1/files/'+file.sharename+'/'+file.fileid}}).then(response=>Object.assign(result,{original:response.finalUrl}),reason=>result)}))))}):Promise.reject('invalid argument')}setSession(){if(Gett.isSessionValid(this.session))return Promise.resolve(this.session);const params={responseType:'json'};return(this.uid&&this.password&&this.apiKey?globalXHR(this.origin+'/1/users/login',params,{apikey:this.apiKey,email:this.uid,password:this.password}):Promise.reject('user not configured')).catch(reason=>globalXHR(this.origin+'/anon/signup',params,{apikey:this.apiKey})).then(({response:response})=>(this.session=response,this.session.expires_at=Date.now()+this.session.expires,Gett.isSessionValid(this.session)?this.session:Promise.reject('login invalid')))}static isSessionValid(session){return session&&'object'==typeof session&&session.accesstoken&&session.expires_at>Date.now()+3e4}}class SavePhoto{constructor(){this.alias='SavePhoto',this.origin='http://savephoto.ru'}upload(images,progressHandler=null){if(!Array.isArray(images))return Promise.reject('invalid argument');if((images=images.filter(isSupportedType.bind(this))).length<=0)return Promise.reject('nothing to upload');if(images.length<=0)return Promise.reject('nothing to upload');if(this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20))return Promise.reject('size limit exceeded by one or more images');const guid=uuid();return Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="files[]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/Upload/UploadHandler.ashx?id='+guid,headers:{'Content-Type':'multipart/form-data; boundary='+boundary},data:formData,responseType:'json',binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?response.response.error?reject(response.response.error):resolve(response.response[0]):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}).then(result=>imageUrlResolver(result.pathFile).then(imageUrl=>({original:imageUrl,thumb:imageUrl.replace(result.name,result.name+'_t'),share:result.pathFile})))))}}class UuploadIr{constructor(){this.alias='Uupload.ir',this.origin='https://uupload.ir',this.types=['jpeg','gif','png','bmp','psd','tiff','ico']}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';images.forEach((image,index)=>{formData+='Content-Disposition: form-data; name="__userfile[]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="ittl"\r\n\r\n',formData+='0\r\n',
//formData += '86400\r\n'; // for debugging
formData+='--'+boundary+'--\r\n',GM_xmlhttpRequest({method:'POST',url:this.origin+'/process.php',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin,'X-Requested-With':'XMLHttpRequest'},data:formData,binary:!0,responseType:'document',timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));resolve(Array.from(domParser.parseFromString(response.responseText,'text/html').querySelectorAll('table#linkst > tbody > tr:nth-of-type(2) > td.wpk > input[type="text"]')).map(input=>input.value).filter(RegExp.prototype.test.bind(httpParser)))},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}).then(imageUrls=>imageUrls.length<images.length?(console.warn('Upload.ir: server returned less links than expected',images,imgUrls),Promise.reject('server returned less links than expected')):(imageUrls.length>images.length&&console.warn('Upload.ir: server returned more links than expected',images,imgUrls),imageUrls.map(UuploadIr.resultHandler))):Promise.reject('invalid argument')}static resultHandler(imageUrl){return{original:imageUrl,thumb:imageUrl.replace(/(\.\w*)?$/,'_thumb$1')}}}class CasImages{constructor(){this.alias='CasImages',this.origin='https://www.casimages.com',this.types=['jpeg','gif','png'],this.sizeLimit=10}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="Filedata"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload_ano_multi.php',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin,'X-Requested-With':'XMLHttpRequest'},data:formData,responseType:'text',binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?resolve(response.responseText):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}).then(CasImages.prototype.resultHandler.bind(this)))):Promise.reject('invalid argument')}resultHandler(result){let shareUrl=this.origin+'/i/'+result+'.html';return imageUrlResolver(shareUrl).then(imageUrl=>({original:imageUrl,thumb:imageUrl.replace(result,'mini_'+result),share:shareUrl}))}}class NoelShack{constructor(){this.alias='NoelShack',this.origin='https://www.noelshack.com',this.types=['jpeg','gif','png','bmp','tiff','svg+xml'],this.sizeLimit=4}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="fichier[]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/envoi.json',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin,'X-Requested-With':'XMLHttpRequest'},data:formData,responseType:'json',binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{response.status>=200&&response.status<400?resolve(NoelShack.resultHandler(response.response)):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):Promise.all(urls.map(url=>verifyImageUrl(url).then(imageUrl=>globalXHR(this.origin+'/telecharger.json?url='+imageUrl,{responseType:'json',headers:{Referer:this.origin},timeout:urls.length*rehostTimeout}).then(({response:response})=>NoelShack.resultHandler(response))))):Promise.reject('invalid argument')}static resultHandler(result){return'null'==result.erreurs?{original:result.url,thumb:result.mini}:Promise.reject(result.erreurs)}}class GetaPic{constructor(){this.alias='GetaPic',this.origin='https://getapic.me'}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.batchLimit&&images.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):this.setSession().then(session=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n',params={getpreviewsize:200,upload_quality:100,getpreviewalt:0,getreduceimage:0,needreduce:0,upload_angle:0,upload_resizeside:0,gettypeofdownload:'N'};Object.keys(params).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=params[key]+'\r\n',formData+='--'+boundary+'\r\n'}),Object.keys(session).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=session[key]+'\r\n',formData+='--'+boundary+'\r\n'}),images.forEach((image,index)=>{formData+='Content-Disposition: form-data; name="file[]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary,index>=images.length-1&&(formData+='--'),formData+='\r\n'}),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin,'X-Requested-With':'XMLHttpRequest'},cookie:'getapime='+session.session,data:formData,binary:!0,responseType:'json',timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));try{if(!response.response.result.success)return reject(response.response.result.errors);resolve(response.response.result.data.url)}catch(e){console.error('GetaPic invalid response structure:',response.response,e),reject(e)}},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}).then(resultUrl=>globalXHR(resultUrl,{responseType:'json'}).then(({response:response})=>{try{if(!response.result.success)return Promise.reject(response.result.errors);if(response.result.data.images.length<images.length)return console.warn('GetaPic returning incomplete list of images (',response.result.data.images,images,')'),Promise.reject(`not all images uploaded (${response.result.data.images.length}/${images.length})`);response.result.data.images.length>images.length&&console.warn('GetaPic returns more links than expected (',response.result.data.images,images,')');return response.result.data.images.map(image=>({original:image.url/*.replace(...forceSSL)*/,thumb:image.thumb?image.thumb.url/*.replace(...forceSSL)*/:void 0,share:'http://getapic.me/v/'.concat(image.marker)/*.replace(...forceSSL)*/,optimal:image.optimal?image.optimal.url/*.replace(...forceSSL)*/:void 0}))}catch(e){return console.error('GetaPic invalid response structure:',response,e),Promise.reject(e)}}))):Promise.reject('invalid argument')}setSession(){return globalXHR(this.origin,{responseType:'json'}).then(({response:response})=>response.result.data)}}class SMMS{constructor(){this.alias='SM.MS',this.origin='https://sm.ms',this.sizeLimit=5.0078125,this.types=['jpeg','png','gif','bmp'],this.batchLimit=10,void 0===(this.apiKey=GM_getValue('smms_api_key'))&&GM_setValue('smms_api_key','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="file_id"\r\n\r\n',formData+=index+'\r\n--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="smfile"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="format"\r\n\r\n',formData+='json\r\n--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/api/v2/upload',headers:Object.assign({'Content-Type':'multipart/form-data; boundary='+boundary,'X-Requested-With':"XMLHttpRequest"},session),data:formData,binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),responseType:'json',onload:response=>{response.status>=200&&response.status<400?response.response.success?resolve({original:response.response.data.url,share:response.response.data.page}):'image_repeated'==response.response.code?resolve(response.response.images):reject(response.response.message):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}setSession(){let result={};return this.apiKey&&(result.Authorization='Basic '+this.apiKey),Promise.resolve(result)}}class CubeUpload{constructor(){this.alias='CubeUpload',this.origin='https://cubeupload.com',this.types=['jpeg','png','gif','bmp'],this.userId=GM_getValue('cubeupload_userid'),this.userHash=GM_getValue('cubeupload_userhash')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(session=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';Object.keys(session).forEach(key=>{formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=session[key]+'\r\n',formData+='--'+boundary+'\r\n'}),formData+='Content-Disposition: form-data; name="name"\r\n\r\n',formData+=image.name+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="fileinput[0]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload_json.php',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin,'X-Requested-With':'XMLHttpRequest'},data:formData,responseType:'json',binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));response.response.error?reject(response.response.status):resolve({original:response.response.img_direct_link,thumb:response.response.img_thumb_link,share:response.response.img_sharing_link})},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}setSession(){return this.userId&&this.userHash?Promise.resolve({userID:this.userId,userHash:this.userHash}):globalXHR(this.origin,{responseType:'text'}).then(response=>(this.userId=/\b(?:var\s+user_id)\s*=\s*(\d+)\b/.exec(response.responseText),null!=this.userId?GM_setValue('cubeupload_userid',this.userId=parseInt(this.userId[1])):delete this.userId,this.userHash=/\b(?:var\s+user_hash)\s*=\s*"(\w+)"/.exec(response.responseText),null!=this.userHash?GM_setValue('cubeupload_userhash',this.userHash=this.userHash[1]):delete this.userHash,this.userId&&this.userHash?Promise.resolve({userID:this.userId,userHash:this.userHash}):Promise.reject('account credentials aren\'t set, please login to your account and repeat the action')))}}class GooPics{constructor(){this.alias='GooPics',this.origin='https://goopics.net',this.types=['jpeg','png','gif'],this.sizeLimit=15}upload(images,progressHandler=null){if(!Array.isArray(images))return Promise.reject('invalid argument');if((images=images.filter(isSupportedType.bind(this))).length<=0)return Promise.reject('nothing to upload');if(this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20))return Promise.reject('size limit exceeded by one or more images');let domParser=new DOMParser;return Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="fileinput[0]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin,'X-Requested-With':'XMLHttpRequest'},data:formData,responseType:'document',binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));let dom=domParser.parseFromString(response.responseText,'text/html'),result={original:dom.querySelector('article input[id^="direct_"]'),thumb:dom.querySelector('article > a > img'),share:dom.querySelector('article input[id^="basic_"]')};null!=result.original?result.original=result.original.value:reject('unexpected result structure'),result.thumb=null!=result.thumb?result.thumb.src:void 0,result.share=null!=result.share?result.share.value:void 0,resolve(result)},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))}}class BilderUpload{constructor(){this.alias='BilderUpload',this.origin='https://www.bilder-upload.eu',this.types=['jpeg','png','gif'],this.sizeLimit=10}upload(images,progressHandler=null){if(!Array.isArray(images))return Promise.reject('invalid argument');if((images=images.filter(isSupportedType.bind(this))).length<=0)return Promise.reject('nothing to upload');if(this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20))return Promise.reject('size limit exceeded by one or more images');new DOMParser;return Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="datei"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="upload"\r\n\r\n',formData+='1\r\n--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin,headers:{'Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin,'X-Requested-With':'XMLHttpRequest'},data:formData,responseType:'document',binary:!0,timeout:getUploadTimeout(images.reduce((acc,image)=>acc+image.size,1024*images.length)),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));let result={thumb:response.response.querySelector('div.box img'),share:response.response.querySelector('textarea[name="URLCode"]')};null!=result.thumb&&(result.thumb=new URL(result.thumb.src),result.thumb=this.origin+result.thumb.pathname,result.original=result.thumb.replace('/thumb/','/upload/')),result.share=null!=result.share?result.share.value:void 0,result.original?resolve(result):reject('unexpected result structure')},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))}}class Ra{constructor(){this.alias='Ra',this.origin='https://thesungod.xyz',this.types=['gif','vnd.microsoft.icon','jpeg','png','svg+xml','tiff','webp','bmp'],this.sizeLimit=100,(this.apiKey=GM_getValue('thesungod_api_key'))?(GM_setValue('ra_api_key',this.apiKey),GM_deleteValue('thesungod_api_key')):void 0===(this.apiKey=GM_getValue('ra_api_key'))&&GM_setValue('ra_api_key',''),this.thumbSize=200}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(apiKey=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="api_key"\r\n\r\n',formData+=apiKey+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="image"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/api/image/upload',responseType:'text',//'json' ?
headers:{Accept:'text/plain','Content-Type':'multipart/form-data; boundary='+boundary,'X-Requested-With':'XMLHttpRequest'},data:formData,binary:!0,timeout:getUploadTimeout(formData.length),onload:response=>{response.status>=200&&response.status<400?resolve(this.resultHandler(response.responseText)):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length>0?this.setSession().then(apiKey=>Promise.all(urls.map((url,index)=>verifyImageUrl(url).then(imageUrl=>globalXHR(this.origin+'/api/image/rehost',{responseType:'text',timeout:urls.length*rehostTimeout},new URLSearchParams({link:imageUrl,api_key:apiKey})).then(response=>('function'==typeof progressHandler&&httpParser.test(response.responseText)&&progressHandler(!0),this.resultHandler(response.responseText))))))):Promise.reject('nothing to rehost'):Promise.reject('invalid argument')}resultHandler(response){const result=imageUrl=>['jpeg','png'].some(ext=>imageUrl.endsWith('.'+ext))?{original:imageUrl,thumb:imageUrl+'?width='+this.thumbSize+'&height='+this.thumbSize}:imageUrl;if(httpParser.test(response))return result(response);try{let links=JSON.parse(response).links;if(console.assert(Array.isArray(links)&&1==links.length,'Array.isArray(links) && links.length == 1',response),links.length>0&&httpParser.test(links[0]))return result(links[0])}catch(e){}return console.warn('Ra unexpected response:',response),Promise.reject('void or invalid result')}setSession(){return this.apiKey?Promise.resolve(this.apiKey):globalXHR(this.origin+'/api/user/genkey',{responseType:'text'}).then(response=>{if(this.apiKey=response.responseText)return GM_setValue('ra_api_key',this.apiKey),Promise.resolve(this.apiKey).then(apiKey=>{alert(`Your Ra API key [${apiKey}] was successfully generated.\nFor later use with different applications or browsers, it's saved in script's storage`)}),this.apiKey;let counter=GM_getValue('ra_reminder_read',0);return counter<3&&(alert(`Ra API key could not be generated. Please login to ${this.origin}/ and redo the action.`),GM_setValue('ra_reminder_read',++counter)),Promise.reject('Ra API key not configured')})}}class Mobilism{constructor(){this.alias='Mobilism',this.origin='https://images.mobilism.org',this.types=['png','jpeg','gif','bmp','psd'],this.sizeLimit=1,this.whitelist=['forum.mobilism.org','forum.mobilism.me']}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.batchLimit&&images.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';images.forEach((image,ndx)=>{formData+='Content-Disposition: form-data; name="fileName[]"\r\n\r\n',formData+=image.name+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="file[]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary,ndx+1>=images.length&&(formData+='--'),formData+='\r\n'}),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload.php',responseType:'document',headers:{Accept:'text/html','Content-Type':'multipart/form-data; boundary='+boundary,Referer:this.origin+'/index.php'},data:formData,binary:!0,timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));if(!response.response)return reject('void response');console.assert(response.response instanceof HTMLDocument,'response.response instanceof HTMLDocument',response.response);let imageUrls=Array.from(response.response.querySelectorAll('input#codedirect[type="text"]')).map(input=>input.value);if(imageUrls.length<images.length)return console.warn('Mobilism returning incomplete list of images (',imageUrls,')'),reject(`not all images uploaded (${imageUrls.length}/${images.length})`);imageUrls.length>images.length&&console.warn('Mobilism returns more links than expected (',imageUrls,images,')'),resolve(imageUrls)},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}):Promise.reject('invalid argument')}rehost(urls){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):this.batchLimit&&urls.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):Promise.all(urls.map(url=>httpParser.test(url)?/\.(?:jpe?g|jfif|png|gif|bmp|psd)$/i.test(url)?verifyImageUrl(url):verifyImageUrl(url+'#.jpg').then(finalUrl=>url+'#.jpg').catch(reason=>{let redirects=['imgcdn','imgbb','pixhost','gifyu'].filter(alias=>alias in imageHostHandlers&&'function'==typeof imageHostHandlers[alias].rehost).map(alias=>imageHostHandlers[alias]);const redirect=(index=0)=>(index>=0&&index<redirects.length?redirects[index].rehost([url],null,!0).catch(reason=>redirect(index+1)):Promise.reject('redirection failed on all hosts')).then(results=>results.map(directLinkGetter));return redirect()}):Promise.reject('URL not valid ('+url+')'))).then(imageUrls=>Promise.all(imageUrls.map(imageUrl=>{let formData=new URLSearchParams({imgUrl:imageUrl});return globalXHR(this.origin+'/upload.php',{responseType:'document',headers:{Referer:this.origin+'/index.php'},timeout:imageUrls.length*rehostTimeout},formData).then(response=>{if(response.status<200||response.status>=400)return Promise.reject(defaultErrorHandler(response));if(!response.response)return Promise.reject('void response');console.assert(response.response instanceof HTMLDocument,'response.response instanceof HTMLDocument',response.response);let imageUrls=Array.from(response.response.querySelectorAll('input#codedirect[type="text"]')).map(input=>input.value);return imageUrls.length<=0?Promise.reject('image not uploaded'):(imageUrls.length>1&&console.warn('Mobilism returns more links than expected (',imageUrls,')'),imageUrls)})})).then(results=>results.flatten())):Promise.reject('invalid argument')}}class PomfCat{constructor(){this.alias='Pomf.cat',this.origin='https://pomf.cat',this.types=['jpeg','png','gif','bmp','webp','tiff','tif'],this.sizeLimit=75}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.batchLimit&&images.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';images.forEach((image,index)=>{formData+='Content-Disposition: form-data; name="files[]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary,index>=images.length-1&&(formData+='--'),formData+='\r\n'}),GM_xmlhttpRequest({method:'POST',url:this.origin+'/upload.php',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,'X-Requested-With':'XMLHttpRequest'},data:formData,binary:!0,responseType:'json',timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));try{if(!response.response.success)return reject(response.response.error);resolve(response.response.files.map(file=>'https://a.pomf.cat/'+file.url))}catch(e){console.error('Pomf.cat invalid response structure:',response.response,e),reject(e)}},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}):Promise.reject('invalid argument')}}class LinkPicture{constructor(){this.alias='Link Picture',this.origin='https://linkpicture.com',this.types=['jpeg','png','gif','bmp','xbm','wxmb'],this.sizeLimit=0}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.batchLimit&&images.length>this.batchLimit?Promise.reject('batch limit exceeded ('+this.batchLimit+')'):new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';images.forEach((image,index)=>{formData+='Content-Disposition: form-data; name="mFile[]"; filename="'+image.name+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary,formData+='\r\n'}),formData+='Content-Disposition: form-data; name="sozlesmeCbox"\r\n\r\n',formData+='on\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="shareCbox"\r\n\r\n',formData+='on\r\n',formData+='--'+boundary+'--\r\n',GM_xmlhttpRequest({method:'POST',url:this.origin+'/en/upload.php',headers:{'Content-Type':'multipart/form-data; boundary='+boundary,'X-Requested-With':'XMLHttpRequest'},data:formData,binary:!0,responseType:'document',timeout:getUploadTimeout(formData.length),onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));const results=Array.from(response.document.querySelectorAll('div.card > a > img')).map(img=>this.origin+img.parentNode.pathname);if(results.length<images.length)return reject('Server returned less links than expected ('+results.length+')');results.length>images.length&&console.warn(this.alias,'server returns more links than expected ('+results.length+')'),resolve(results)},onprogress:'function'==typeof progressHandler?progressHandler:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}):Promise.reject('invalid argument')}rehost(urls){return Array.isArray(urls)?urls.length<=0?Promise.reject('nothing to rehost'):verifyImageUrls(urls).then(imageUrls=>Promise.all(imageUrls.map(imageUrl=>{const payLoad=new URLSearchParams({weblink:imageUrl});return globalXHR(this.origin+'/upload.php',{responseType:'document',headers:{Referer:this.origin+'/index.php'},timeout:imageUrls.length*rehostTimeout},payLoad).then(response=>{if(response.status<200||response.status>=400)return Promise.reject(defaultErrorHandler(response));const img=response.document.querySelector('div.card > a > img');return null!=img?this.origin+img.parentNode.pathname:Promise.reject('Unexpected page structure')})}))):Promise.reject('invalid argument')}}class ImageKit{constructor(){this.alias='ImageKit',this.origin='https://upload.imagekit.io',this.types=['jpeg','png','gif','tiff','webp','bmp','svg+xml'],
//this.sizeLimit = 100;
(this.publicKey=GM_getValue('imagekit_public_key'))||GM_setValue('imagekit_public_key',''),(this.privateKey=GM_getValue('imagekit_private_key'))||GM_setValue('imagekit_private_key','')}upload(images,progressHandler=null){return Array.isArray(images)?(images=images.filter(isSupportedType.bind(this))).length<=0?Promise.reject('nothing to upload'):this.sizeLimit>0&&images.some(image=>image.size>this.sizeLimit*2**20)?Promise.reject('size limit exceeded by one or more images'):this.setSession().then(signature=>Promise.all(images.map((image,index)=>new Promise((resolve,reject)=>{const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';for(let key in signature)formData+='Content-Disposition: form-data; name="'+key+'"\r\n\r\n',formData+=signature[key]+'\r\n',formData+='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="file"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n',formData+=image.data+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="fileName"\r\n\r\n',formData+=image.name.toASCII()+'\r\n',formData+='--'+boundary+'\r\n',formData+='Content-Disposition: form-data; name="useUniqueFileName"\r\n\r\n',formData+='true\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:this.origin+'/api/v1/files/upload',responseType:'json',headers:{Accept:'application/json','Content-Type':'multipart/form-data; boundary='+boundary,'X-Requested-With':'XMLHttpRequest'},data:formData,binary:!0,timeout:getUploadTimeout(formData.length),onload:response=>{response.status>=200&&response.status<400?resolve(ImageKit.resultHandler(response.response)):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress,index):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))):Promise.reject('invalid argument')}rehost(urls,progressHandler=null){return Array.isArray(urls)?urls.length>0?this.setSession().then(signature=>Promise.all(urls.map((url,index)=>verifyImageUrl(url).then(imageUrl=>getRemoteFileType(imageUrl).catch(reason=>'image/jpeg').then(mimeType=>{const payLoad=new FormData;payLoad.set('file',imageUrl),payLoad.set('fileName','image-'+Date.now().toString(16)+mimeType.toLowerCase().replace(/^(?:\w+)\//,'.')),payLoad.set('useUniqueFileName',!1);for(let key in signature)payLoad.set(key,signature[key]);return globalXHR(this.origin+'/api/v1/files/upload',{responseType:'json',timeout:urls.length*rehostTimeout},payLoad).then(response=>('function'==typeof progressHandler&&httpParser.test(response.responseText)&&progressHandler(!0),ImageKit.resultHandler(response.response)))}))))):Promise.reject('nothing to rehost'):Promise.reject('invalid argument')}static resultHandler(response){return{original:response.url,thumb:response.thumbnailUrl}}setSession(){if(!this.publicKey||!this.privateKey)return Promise.reject('ImageKit API keys not configured');const result={publicKey:this.publicKey,token:uuid(),expire:Math.round(Date.now()/1e3)+600};return new Promise((function(resolve,reject){if('object'==typeof CryptoJS&&CryptoJS)return resolve(CryptoJS);const cryptoJS=document.createElement('SCRIPT');cryptoJS.type='text/javascript',cryptoJS.onload=evt=>{resolve(CryptoJS)},cryptoJS.onerror=evt=>{reject('crypto-js failed to load')},cryptoJS.src='https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js',document.head.append(cryptoJS)})).then(cryptoJS=>Object.assign(result,{signature:cryptoJS.HmacSHA1(result.token+result.expire.toString(),this.privateKey).toString(cryptoJS.enc.Hex)}))}}function directLinkGetter(result){switch(typeof result){case'string':if(httpParser.test(result))return result;case'object':if(httpParser.test(result.original))return result.original}if(httpParser.test(result))return RegExp.$1;throw console.warn('directLinkGetter() invalid result of upload:',result),'invalid result format'}function singleImageGetter(results){if(!Array.isArray(results))throw console.error('singleImageGetter(',results,')'),'invalid result format';if(results.length>0)return directLinkGetter(results[0]);throw'empty links list'}var imageHostHandlers={abload:new Abload,bilderupload:new BilderUpload,casimages:new CasImages,catbox:new Catbox,cubeupload:new CubeUpload,
//'dropbox': new DropBox,
fastpic:new FastPic,funkyimg:new FunkyIMG,geekpic:new GeekPic,getapic:new GetaPic,gett:new Gett,gifyu:new Chevereto('gifyu.com','Gifyu',['jpeg','png','gif','bmp','webp'],100,{sizeLimitAnonymous:50}),googledrive:new GoogleDrive,goopics:new GooPics,
//'googlephotos': new GooglePhotos,
imageban:new ImageBan,imagekit:new ImageKit,imagevenue:new ImageVenue,imgbb:new Chevereto('imgbb.com','ImgBB',['jpeg','png','bmp','gif','webp','tiff','heic','heif'],32,{apiEndpoint:'https://api.imgbb.com/1',apiFieldName:'image',apiResultKey:'data'}),imgbox:new ImgBox,imgur:new Imgur,imgurl:new ImgURL,jerking:new Chevereto('jerking.empornium.ph','Jerking',['jpeg','png','bmp','gif','webp'],5),lightshot:new LightShot,linkpicture:new LinkPicture,mobilism:new Mobilism,noelshack:new NoelShack,nwcd:new NWCD,
//'onedrive': new OneDrive,
picabox:new PicaBox,pimpandhost:new PimpAndHost,pixhost:new PixHost,pomfcat:new PomfCat,postimage:new PostImage,ptpimg:new PTPimg,ra:new Ra,radikal:new Radikal,savephoto:new SavePhoto,
//'screencast': new ScreenCast,
slowpoke:new Slowpoke,smms:new SMMS,svgshare:new SVGshare,uuploadir:new UuploadIr,vgyme:new VgyMe,z4a:new Chevereto('z4a.net','Z4A',['jpeg','png','bmp','gif'],50)},siteWhitelists={'notwhat.cd':['nwcd']},siteBlacklists={'passthepopcorn.me':['imgbox','postimage','imgur','tinypic','imageshack','imagebam']};class ImageHostManager{constructor(messageHandler=null,UlHostList,rhHostList){this.messageHandler=messageHandler,UlHostList?this.buildUploadChain(UlHostList):this.ulHostChain=[],rhHostList?this.buildRehostChain(rhHostList):this.rhHostChain=[]}processLists(alias){return(!Array.isArray(siteWhitelists[document.domain])||siteWhitelists[document.domain].some(whiteAlias=>alias==whiteAlias.toLowerCase()))&&(!Array.isArray(siteBlacklists[document.domain])||siteBlacklists[document.domain].every(blackAlias=>alias!=blackAlias.toLowerCase()))}static getAliasArray(list){return(Array.isArray(list)?list:'string'==typeof list?list.split(/[\s\,\;\|\/]+/):[]).map(alias=>[['TheSunGod','Ra'],['NotWhat','NWCD'],['NotWhat.cd','NWCD'],['NotWhatCd','NWCD'],['Vgy.me','VgyMe'],['SM.MS','SMMS'],['Radikal.ru','Radikal'],['PTPimg.me','PTPimg'],['PostImages','PostImage'],['PostImg','PostImage'],['Empornium','Jerking'],['Bilder-Upload','BilderUpload'],['Uupload.ir','UuploadIr']].reduce((acc,def)=>acc.toLowerCase()!=def[0].toLowerCase()?acc:def[1],alias).replace(nonWordStripper,'').toLowerCase())}buildUploadChain(list){this.ulHostChain=ImageHostManager.getAliasArray(list).filter(ImageHostManager.prototype.processLists.bind(this)).map(alias=>imageHostHandlers[alias]).filter(handler=>'object'==typeof handler&&'function'==typeof handler.upload&&(!Array.isArray(handler.whitelist)||handler.whitelist.includes(document.domain))&&(!Array.isArray(handler.blacklist)||!handler.blacklist.includes(document.domain))),console.debug('Local upload hosts for '+document.domain+':',this.ulHostChain.map(handler=>handler.alias).join(', '))}buildRehostChain(list){this.rhHostChain=ImageHostManager.getAliasArray(list).filter(ImageHostManager.prototype.processLists.bind(this)).map(alias=>imageHostHandlers[alias]).filter(handler=>'object'==typeof handler&&'function'==typeof handler.rehost&&('redacted.ch'!=document.domain||'ptpimg'==handler.alias.toLowerCase())&&(!Array.isArray(handler.whitelist)||handler.whitelist.includes(document.domain))&&(!Array.isArray(handler.blacklist)||!handler.blacklist.includes(document.domain))),console.debug('Remote upload hosts for '+document.domain+':',this.rhHostChain.map(handler=>handler.alias).join(', '))}uploadImages(files,progressHandler=null){return!Array.isArray(this.ulHostChain)||this.ulHostChain.length<=0?Promise.reject('No hosts where to upload'):'object'!=typeof files?Promise.reject('Invalid argument'):(Array.isArray(files)||(files=Array.from(files)),files.length>1&&files.sort((a,b)=>a.name.localeCompare(b.name)),(files=files.filter(file=>file instanceof File&&file.size>0&&(!file.type||file.type.startsWith('image/')))).length<=0?Promise.reject('Nothing to upload'):Promise.all(files.map(file=>file.getContent())).then(images=>function uploadInternal(hostIndex=0){return hostIndex>=0&&hostIndex<this.ulHostChain.length?(()=>{if(!files.every(isSupportedType.bind(this.ulHostChain[hostIndex])))return Promise.reject('one or more files of unsupported format');if(this.ulHostChain[hostIndex].sizeLimit>0&&files.some(file=>file.size>this.ulHostChain[hostIndex].sizeLimit*2**20))return Promise.reject(`one or more images exceed size limit (${this.ulHostChain[hostIndex].sizeLimit}MiB)`);
//if (this.ulHostChain[hostIndex].batchLimit && files.length > this.ulHostChain[hostIndex].batchLimit)
//	return Promise.reject(`batch limit exceeded (${this.ulHostChain[hostIndex].batchLimit})`);
if('function'==typeof progressHandler){progressHandler(hostIndex,null);var _progressHandler=(param=null,index)=>progressHandler(hostIndex,param,index)}return this.ulHostChain[hostIndex].upload(this.ulHostChain[hostIndex].upload.acceptFiles?files:images,_progressHandler)})().catch(reason=>{console.warn('Upload to',this.ulHostChain[hostIndex].alias,'failed:',reason);let msg=`Upload to ${this.ulHostChain[hostIndex].alias} failed (${reason})`;return++hostIndex<this.ulHostChain.length?('function'==typeof this.messageHandler&&this.messageHandler(`${msg}, falling back to ${this.ulHostChain[hostIndex].alias}`),uploadInternal.call(this,hostIndex)):('function'==typeof this.messageHandler&&this.messageHandler(msg),Promise.reject('Upload failed to all hosts'))}):Promise.reject(`Host index out of bounds (${hostIndex})`)}.call(this)))}rehostImages(urls,progressHandler=null){if(!Array.isArray(urls))return Promise.reject('Invalid argument');if((urls=urls.filter(RegExp.prototype.test.bind(httpParser))).length<=0)return Promise.reject('Nothing to rehost');if(!Array.isArray(this.rhHostChain)||this.rhHostChain.length<=0)return Promise.resolve(urls);if(testRemoteSizes)var start=Date.now();return(testRemoteSizes?Promise.all(urls.map(url=>getRemoteFileSize(url).catch(reason=>{}))):Promise.resolve('Size tests skipped')).then(lengths=>{testRemoteSizes&&console.debug('Size analysis time:',(Date.now()-start)/1e3,'s');try{var h2=urls.map(url=>new URL(url).hostname)}catch(e){console.error('Assertion failed: '+e)}return function rehostInternal(hostIndex=0){if(hostIndex<0||hostIndex>=this.rhHostChain.length)return Promise.reject(`Host index out of bounds (${hostIndex})`);try{// don't rehost again to same site
let h1=new URL(this.rhHostChain[hostIndex].origin).hostname;if(h1&&Array.isArray(h2)&&h2.every(h2=>h2.includes(h1)||h1.includes(h2)))return Promise.resolve(urls)}catch(e){}
//if (this.rhHostChain[hostIndex].batchLimit && urls.length > this.rhHostChain[hostIndex].batchLimit)
//	return Promise.reject('batch limit exceeded (' + this.rhHostChain[hostIndex].batchLimit + ')');
if(this.rhHostChain[hostIndex].sizeLimit>0&&Array.isArray(lengths)&&!lengths.every(length=>!length||length<=this.rhHostChain[hostIndex].sizeLimit*2**20))return Promise.reject(`one or more images exceed size limit (${this.rhHostChain[hostIndex].sizeLimit}MiB)`);if('function'==typeof progressHandler){progressHandler(hostIndex,!1);var _progressHandler=(param=!0)=>progressHandler(hostIndex,param)}return this.rhHostChain[hostIndex].rehost(urls,_progressHandler).catch(reason=>{console.warn('Rehost to',this.rhHostChain[hostIndex].alias,'failed:',reason);let msg=`Rehost to ${this.rhHostChain[hostIndex].alias} failed (${reason})`;return++hostIndex<this.rhHostChain.length?('function'==typeof this.messageHandler&&this.messageHandler(`${msg}, falling back to ${this.rhHostChain[hostIndex].alias}`),rehostInternal.call(this,hostIndex)):('function'==typeof this.messageHandler&&this.messageHandler(msg),Promise.reject('Rehost failed to all hosts'))})}.call(this)})}}function forcedRehost(imageUrl){const lastInstanceHosts=['imgbb','pixhost','postimage'];return function rehost(index=0){return index>=0&&index<lastInstanceHosts.length?imageHostHandlers[lastInstanceHosts[index]].rehost([imageUrl]).catch(reason=>rehost(index+1)):Promise.reject('Rehost failed to all forced hosts')}().then(singleImageGetter)}function urlResolver(url){if(Array.isArray(url)&&(url=url[0]),!httpParser.test(url))return Promise.reject('Invalid URL:\n\n'+url);try{url instanceof URL||(url=new URL(url))}catch(e){return Promise.reject(e)}switch(url.hostname){case'www.google.com':case'google.com':if('/url'==url.pathname){let URL=url.searchParams.get('url');if(httpParser.test(URL))return urlResolver(URL)}break;case'rutracker.org':if('/forum/out.php'!=url.pathname)break;return globalXHR(url,{method:'HEAD'}).then(response=>urlResolver(response.finalUrl));case'play.qobuz.com':if(/^\/album\/(\w+)\b/i.test(url.pathname))return globalXHR('https://www.qobuz.com/album/-/'+RegExp.$1,{method:'HEAD'}).then(response=>response.finalUrl);break;case'www.anonymz.com':case'anonymz.com':case'anonym.to':case'dereferer.me':var resolved=decodeURIComponent(url.search.slice(1));return httpParser.test(resolved)?urlResolver(resolved):genericResolver();
//case 'reho.st':
//	resolved = (url.pathname + url.search + url.hash).slice(1);
//	if (/\b(?:https?):\/\/(?:\w+\.)*(?:discogs\.com|omdb\.org)\//i.test(resolved)) break;
// 	return httpParser.test(resolved) ? urlResolver(resolved) : genericResolver();
// URL shorteners
case'tinyurl.com':case'bit.ly':case'j.mp':case't.co':case'apple.co':case'flic.kr':case'rebrand.ly':case'b.link':case't2m.io':case'zpr.io':case'yourls.org':case'ibn.im':case'deezer.page.link':return genericResolver()}return/\b(?:goo\.gl)$/i.test(url.hostname)?genericResolver():Promise.resolve(url.href);function genericResolver(){return globalXHR(url).then((function(response){let redirect=response.document.querySelector('meta[http-equiv="refresh"]');return null!=redirect&&(redirect=redirect.content.replace(/^.*?\b(?:URL)\s*=\s*/i,''))!=url.href||/^ *(?:Location) *: *(\S+) *$/im.test(response.responseHeaders)&&(redirect=RegExp.$1)!=url.href||/^ *(?:Refresh) *: *(\d+); *url=(\S+) *$/im.test(response.responseHeaders)&&(redirect=RegExp.$2)!=url.href||(redirect=response.finalUrl)!=url.href?urlResolver(redirect):Promise.resolve(url.href)}))}}function verifyImageUrl(url){function cacheUrl(resolvedUrl,imageUrl){return verifiedImageUrls.set(url,imageUrl),resolvedUrl!=url&&verifiedImageUrls.set(resolvedUrl,imageUrl),sessionStorage.verifiedImageUrls=JSON.stringify(Array.from(verifiedImageUrls)),imageUrl}return httpParser.test(url)?verifiedImageUrls.has(url)?Promise.resolve(verifiedImageUrls.get(url)):urlResolver(url).then(resolvedUrl=>verifiedImageUrls.get(resolvedUrl)||((resolvedUrl,method="HEAD")=>new Promise((function(resolve,reject){function abort(){hXHR&&'HEAD'!=method&&hXHR.abort(),hXHR=void 0}var hXHR=GM_xmlhttpRequest({method:method,url:resolvedUrl,headers:{Accept:'image/*'},onreadystatechange:function(response){if(response.readyState<XMLHttpRequest.HEADERS_RECEIVED)return;if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response)),void abort();let contentType=/^(?:Content-Type)\s*:\s*(.+?)(?:\s*;(.+?))?\s*$/im.exec(response.responseHeaders);if(null==contentType||!contentType[1].startsWith('image/'))return contentType=' ('+(null!=contentType?contentType[1]:void 0)+')',reject('Not an image: '+response.finalUrl+contentType),void abort();if(['https://i.imgur.com/removed.png','http://y.gtimg.cn/music/photo_new/T001M000003kfNgb0XXvgV_0.jpg','https://y.gtimg.cn/music/photo_new/T001M000003kfNgb0XXvgV_0.jpg'].some(invalidUrl=>invalidUrl.toLowerCase()==response.finalUrl.toLowerCase()))return reject('Dummy image (placeholder): '+response.finalUrl),void abort();let Etag=/^(?:Etag)\s*:\s*(.+?)\s*$/im.exec(response.responseHeaders);if(null!=Etag&&['d835884373f4d6c8f24742ceabe74946','25d628d3d3a546cc025b3685715e065f42f9cbb735688b773069e82aac16c597f03617314f78375d143876b6d8421542109f86ccd02eab6ba8b0e469b67dc953','"55fade2068e7503eae8d7ddf5eb6bd09"','"1580238364"'].some(etag=>etag.toLowerCase()==Etag[1].toLowerCase()))return reject('Dummy image (placeholder): '+response.finalUrl),void abort();cacheUrl(resolvedUrl,response.finalUrl),resolve(response.finalUrl),abort()},onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))(resolvedUrl,'HEAD').catch((function(reason){return function(reason){let httpStatus=/^HTTP error (\d+)\b/.exec(reason);return null!=httpStatus&&(httpStatus=parseInt(httpStatus[1]),[400,403,416].some(code=>httpStatus==code))}(reason)?(console.warn('verifyImageUrl("'+url+'").testByXHR(\'HEAD\'): ',reason,'trying with alternate load method'),new Promise((function(resolve,reject){let img=new Image;img.onload=function(evt){cacheUrl(resolvedUrl,evt.target.src),resolve(evt.target.src)},img.onerror=function(evt){evt.target.src.includes('?')?evt.target.src=resolvedUrl.replace(/\?.*?(?=\#|$)/,''):reject(reason/*'Not a valid image: ' + resolvedUrl + ' (' + evt.type + ')'*/)},img.ontimeout=evt=>{reject('Image load timed out: '+resolvedUrl)},img.src=resolvedUrl}))):Promise.reject(reason)}))):Promise.reject('Parameter not URL')}function verifyImageUrls(urls){return Array.isArray(urls)?Promise.all(urls.map(verifyImageUrl)):Promise.reject('argument not an array')}function reduceImageSize(image,maxImageHeight,jpegQuality,progressHandler){const baseUrl='https://dragon.img2go.com/api/jobs',referer='https://www.img2go.com/',defaultHeaders=()=>({responseType:'json',headers:{Referer:referer}}),getErrorString=response=>response.errors.map(error=>`Error ${error.code} (${error.message})`).join(', ');function waitJobStatus(id,status,async){return new Promise((function(resolve,reject){let params=new URLSearchParams({_:Date.now()});void 0!==async&&params.set('async',async),function waitInput(){globalXHR(baseUrl+'/'+id+'?'+params.toString(),defaultHeaders()).then((function({response:response}){
//console.debug(response.finalUrl, status, response.status.code, response.errors);
response.status.code==status?resolve(response):Array.isArray(response.errors)&&response.errors.length>0?reject(getErrorString(response)):'failed'==response.status.code?reject('reduceImageSize: the job failed'):setTimeout(waitInput,250)})).catch(reject)}()}))}return globalXHR(baseUrl+'?async='+!1,defaultHeaders(),{operation:'converttoimage',//'convert image to image',
fail_on_input_error:!0,fail_on_conversion_error:!0}).then((function({response:response}){return'failed'==response.status.code?Promise.reject('reduceImageSize: the job failed'):('init'!=response.status.code&&console.warn('status.code =',response.status.code),response.sat.id_job?waitJobStatus(response.sat.id_job,'incomplete',!1):(console.warn('reduceImageSize: falling back to old protocol (!sat.id_job)'),response.id?response:Promise.reject('reduceImageSize: missing job id')))})).then(job=>(httpParser.test(image)?globalXHR(baseUrl+'/'+job.id+'/input',defaultHeaders(),{type:'remote',source:image,engine:'auto'}).then((function({response:response}){return'ready'!=response.status&&console.warn('reduceImageSize: set remote input returns '+response.status),response})):function(){return'function'==typeof progressHandler&&progressHandler(-1,null),image instanceof File?image.getContent():image&&'object'==typeof image&&/^(?:image)\//.test(image.type)&&image.size>=0&&image.data?image:Promise.reject('reduceImageSize: invalid input object')}().then(image=>new Promise((function(resolve,reject){const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="file[]"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n'+image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(-1,formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:job.server+'/upload-file/'+job.id,responseType:'json',headers:{Accept:'application/json','Content-Type':'multipart/form-data; boundary='+boundary,Referer:referer,'X-Oc-Token':job.token,'X-Oc-Upload-Uuid':uuid()},data:formData,binary:!0,timeout:getUploadTimeout(image.size),onload:function(response){response.status>=200&&response.status<400?(response.response.completed||console.warn('img2go upload not completed:',response.response),resolve(response.response)):reject(defaultErrorHandler(response))},onprogress:'function'==typeof progressHandler?response=>{progressHandler(-1,response)}:void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})})))).then(response=>new Promise((function(resolve,reject){!function waitInput(){globalXHR(baseUrl+'/'+job.id+'?_='+Date.now(),defaultHeaders()).then((function(response){
// 				console.debug(response.finalUrl, response.response.status.code,
// 					response.response.input.map(input => input.status), response.response.errors);
Array.isArray(response.response.input)&&response.response.input.length>0&&response.response.input.every(input=>'ready'==input.status)?resolve(response.response.input):Array.isArray(response.response.errors)&&response.response.errors.length>0?reject(getErrorString(response.response)):Array.isArray(response.response.input)&&response.response.input.some(input=>'failed'==input.status)?reject('One or more images failed to load'):setTimeout(waitInput,250)})).catch(reject)}()}))).then((function(input){if(maxImageHeight>=0||(maxImageHeight=1800),maxImageHeight>0&&input[0].metadata.image_height>maxImageHeight){for(var imageHeight=2;input[0].metadata.image_height%imageHeight!=0||input[0].metadata.image_height/imageHeight>maxImageHeight;)++imageHeight;(imageHeight=input[0].metadata.image_height/imageHeight)<maxImageHeight/2&&(imageHeight=Math.ceil(3*maxImageHeight/4))}return globalXHR(baseUrl+'/'+job.id+'/conversions',defaultHeaders(),{category:'image',options:{allow_multiple_outputs:!1,height:imageHeight||void 0,quality:jpegQuality>0?jpegQuality:imageHeight>0?void 0:75,antialias:!0},target:'jpg'})})).then(()=>waitJobStatus(job.id,'completed').then((function(response){if(response.output.length<=0)throw'Assertion failed: output.length == 1 ('+response.output.length+')';return console.assert(1==response.output.length,'response.output.length == 1'),console.debug('img2go conversion result:',1==response.output.length?response.output[0]:response.output),response.output[0]}))))}function optiPNG(urlOrFile,progressHandler){return function(){const url='https://ezgif.com/optipng';return urlOrFile instanceof File?['image/png','image/apng'].includes(urlOrFile.type)?urlOrFile.size>36700160?Promise.reject('image exceeding size limit'):urlOrFile.getContent().then(image=>new Promise((function(resolve,reject){const boundary='--------WebKitFormBoundary-'+Date.now().toString(16).toUpperCase();let formData='--'+boundary+'\r\n';formData+='Content-Disposition: form-data; name="new-image"; filename="'+image.name.toASCII()+'"\r\n',formData+='Content-Type: '+image.type+'\r\n\r\n'+image.data+'\r\n',formData+='--'+boundary+'--\r\n','function'==typeof progressHandler&&progressHandler(formData.length-image.size),GM_xmlhttpRequest({method:'POST',url:url,headers:{Accept:'text/html','Content-Type':'multipart/form-data; boundary='+boundary},data:formData,binary:!0,onload:response=>{if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));let domParser=new DOMParser;resolve(domParser.parseFromString(response.responseText,'text/html'))},onprogress:'function'==typeof progressHandler?progress=>progressHandler(progress):void 0,onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}))):Promise.reject('invalid format'):httpParser.test(urlOrFile)?getRemoteFileType(urlOrFile).then((function(mimeType){if(!['image/png','image/apng'].includes(mimeType))return Promise.reject('not PNG');
//return getRemoteFileSize(urlOrFile, false).catch(reason => undefined).then(function(remoteSize) {
//if (remoteSize > 35 * 2**20) return Promise.reject('image exceeding size limit');
let payLoad=new URLSearchParams({'new-image-url':urlOrFile});return globalXHR(url,void 0,payLoad).then(response=>response.document);
//});
})):Promise.reject('invalid argument')}().then((function(dom){let srcImg=dom.querySelector('img#target');if(null==srcImg||!srcImg.src)return Promise.reject('source image upload failed');srcImg=srcImg.src;let form=dom.querySelector('form.ajax-form');if(null==form)return console.warn('ezgif.com form not found'),srcImg||Promise.reject('invalid page structure');let action=new URL(form.action);return globalXHR('https://ezgif.com'+action.pathname,void 0,new FormData(form)).then((function(response){let optImg=response.document.querySelector('p.outfile > img');if(null==optImg||!optImg.src)return console.warn('ezgif.com optimisation failed'),srcImg||Promise.reject('optimisation failed');optImg=optImg.src;let saving=response.document.querySelector('p.filestats > span:not([class])');if(null!=saving){let success=parseFloat(saving.textContent)<0||'green'==saving.style.color;return console.log('optiPNG '+(success?'success':'fail')+':',urlOrFile,optImg,'('+saving.textContent+')'),success?optImg:srcImg||urlOrFile}return console.warn('ezgif.com failed to extract optimisation stats fromm page'),urlOrFile instanceof File?getRemoteFileSize(optImg).then((function(optSize){let delta=optSize-urlOrFile.size,sign=['-','','+'][Math.sign(delta)+1];return saving=100*delta/urlOrFile.size,console.log('optiPNG '+(delta<0?'success':'fail')+':',urlOrFile,optImg,optSize,'('+sign+Math.abs(delta)+' = '+sign+Math.abs(Math.round(10*saving)/10)+'%)'),delta<0?optImg:srcImg||urlOrFile}),(function(reason){return console.warn('ezgif.com failed to query result image size',optImg),optImg})):optImg}))}))}function googlePhotosResolver(url){return globalXHR(url).then((function(response){var result;return response.document.querySelectorAll('body > script[nonce]').forEach((function(script){if(result)return;if(!/^(?:AF_initDataCallback)\(\{\s*key\s*:\s*'ds:(\d+)'.+\b(?:data:function)\(\)\s*\{\s*(?:return)\s*(\[[\S\s]+?\])\s*\}\}\);$/.test(script.text))return;let AF_initDataCallback=eval(RegExp.$2);if(14==AF_initDataCallback.length&&Array.isArray(AF_initDataCallback[0]))try{httpParser.test(AF_initDataCallback[0][1][0])&&(result=AF_initDataCallback[0][1][0]+'=s0')}catch(e){console.warn(e,AF_initDataCallback)}else if(6==AF_initDataCallback.length&&Array.isArray(AF_initDataCallback[1]))try{result=AF_initDataCallback[1].map(photo=>photo[1][0]+'=s0')}catch(e){console.warn(e,AF_initDataCallback)}})),result||Promise.reject('No image content for this URL')}))}function pinterestResolver(url){return globalXHR(url).then((function(response){let initialState=response.document.querySelector('script#initial-state');if(null!=initialState)try{initialState=JSON.parse(initialState.text);let images=Object.keys(initialState.pins).map(pin=>initialState.pins[pin].images.orig.url);if(1==images.length)return images[0];if(images.length>1)return images;let boards=Object.keys(initialState.boards.content);if(boards.length>0)return Promise.all(boards.map((function(board){let params=new URLSearchParams({source_url:response.finalUrl,data:JSON.stringify({options:{board_id:initialState.boards.content[board].id,board_url:initialState.boards.content[board].url}}),_:Date.now()});return globalXHR(url.origin+'/resource/BoardFeedResource/get/?'+params,{responseType:'json',headers:{Referer:response.finalUrl}}).then((function(response){return'success'!=response.response.resource_response.status?(console.warn('Pinterest:',response.response.resource_response,response.finalUrl),Promise.reject('Pinterest: '+response.response.resource_response.status)):response.response.resource_response.data.filter(it=>'pin'==it.type).map(it=>it.images.orig.url)}))})))}catch(e){console.warn(e,initialState)}return Promise.reject('No title image for this URL')}))}function _500pxUrlHandler(path){return globalXHR('https://api.500px.com/v1/'+path+'&image_size[]=4096',{responseType:'json'}).then((function({response:response}){let results=Object.keys(response.photos).map(id=>response.photos[id].image_url[0]);return 1==results.length?results[0]:results.length>1?results:Promise.reject('No image content found on this UIRL')}))}function pxhereCollectionResolver(url){if(!/\/collection\/(\d+)\b/i.test(url.pathname))return Promise.reject('Invalid URL');let collectionId=parseInt(RegExp.$1);return new Promise((function(resolve,reject){let domParser=new DOMParser,photos=[];!function loadPage(page=1){GM_xmlhttpRequest({method:'GET',url:`https://pxhere.com/en/collection/${collectionId}?page=${page}&format=json`,responseType:'json',onload:function(response){if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));if('success'!=response.response._msg)return reject(response.response._msg);if(!response.response.data)return resolve(photos);let dom=domParser.parseFromString(response.response.data,'text/html');Array.prototype.push.apply(photos,Array.from(dom.querySelectorAll('div.item > a')).map(a=>a.pathname)),loadPage(page+1)},onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}()})).then(urls=>Promise.all(urls.map(url=>imageUrlResolver('https://pxhere.com'+url))))}function unsplashCollectionResolver(url){if(!/\/collections\/(\d+)\b/i.test(url.pathname))return Promise.reject('Invalid URL');let collectionId=parseInt(RegExp.$1);return new Promise((function(resolve,reject){let urls=[];!function loadPage(page=1){GM_xmlhttpRequest({method:'GET',url:`https://unsplash.com/napi/collections/${collectionId}/photos?page=${page}&per_page=999`,responseType:'json',onload:function(response){return response.status<200||response.status>=400?reject(defaultErrorHandler(response)):response.response.length<=0?resolve(urls):(Array.prototype.push.apply(urls,response.response.map(photo=>photo.urls.raw.replace(/\?.*$/,''))),void loadPage(page+1))},onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}()}))}function pexelsCollectionResolver(url){if(!/\/collections\/([\w\%\-]+)\//i.test(url.pathname))return Promise.reject('Invalid URL');let collectionId=RegExp.$1;return new Promise((function(resolve,reject){let domParser=new DOMParser,urls=[];!function loadPage(page=1){GM_xmlhttpRequest({method:'GET',url:`https://www.pexels.com/collections/${collectionId}/?format=html&page=${page}`,onload:function(response){if(response.status<200||response.status>=400)return reject(defaultErrorHandler(response));let photos=domParser.parseFromString(response.responseText,'text/html').querySelectorAll('article.photo-item > a.js-photo-link');if(photos.length<=0)return resolve(urls);Array.prototype.push.apply(urls,Array.from(photos).map(a=>a.pathname)),loadPage(page+1)},onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}()})).then(urls=>Promise.all(urls.map(url=>imageUrlResolver('https://www.pexels.com'+url))))}function getRemoteFileType(url){if(!httpParser.test(url))return Promise.reject('getRemoteFileType: parameter not valid URL');if(fileTypeCache.has(url))return Promise.resolve(fileTypeCache.get(url));const getByXHR=(method="GET")=>new Promise((function(resolve,reject){let contentType,hXHR=GM_xmlhttpRequest({method:method,url:url,onreadystatechange:function(response){void 0!==contentType||response.readyState<XMLHttpRequest.HEADERS_RECEIVED||(null!=(contentType=/^(?:Content-Type)\s*:\s*(.+?)(?:\s*;(.+?))?\s*$/im.exec(response.responseHeaders))?(fileTypeCache.set(url,contentType=contentType[1].toLowerCase()),sessionStorage.fileTypeCache=JSON.stringify(Array.from(fileTypeCache)),resolve(contentType)):reject('MIME type missing in header'),'HEAD'!=method&&hXHR.abort())},onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}));return getByXHR('HEAD').catch(reason=>/^HTTP error (403|416)\b/.test(reason)?getByXHR('GET'):Promise.reject(reason))}function getRemoteFileSize(url,forced=!0){if(!httpParser.test(url))return Promise.reject('getRemoteFileSize(...): parameter not valid URL');if(fileSizeCache.has(url))return Promise.resolve(fileSizeCache.get(url));const getByXHR=(method="GET")=>new Promise((function(resolve,reject){function success(){fileSizeCache.set(url,size),sessionStorage.fileSizeCache=JSON.stringify(Array.from(fileSizeCache)),resolve(size)}let size,hXHR=GM_xmlhttpRequest({method:method,url:url,binary:!0,responseType:'blob',onreadystatechange:function(response){if(!('number'==typeof size&&size>=0||response.readyState<XMLHttpRequest.HEADERS_RECEIVED)){if(null!=(size=/^(?:Content-Length)\s*:\s*(\d+)\b/im.exec(response.responseHeaders))&&(size=parseInt(size[1]))>=0)success();else{if(forced&&'HEAD'!=method)return;reject('Body size missing in header')}'HEAD'!=method&&hXHR.abort()}},onload:function(response){// fail-safe
'number'==typeof size&&size>=0||(response.status>=200&&response.status<400?
/*if (response.response) {
						size = response.response.size;
						success();
					} else */
response.responseText?(size=response.responseText.length,success()):reject('Body missing'):reject(defaultErrorHandler(response)))},onerror:response=>{reject(defaultErrorHandler(response))},ontimeout:response=>{reject(defaultTimeoutHandler(response))}})}));return getByXHR(forced?'GET':'HEAD').catch(reason=>!forced&&/^HTTP error (403|416)\b/.test(reason)?getByXHR('GET'):Promise.reject(reason))}function formattedSize(size){return size<1024?Math.round(size)+' B':size<1048576?Math.round(10*size/1024)/10+' KiB':size<1024**3?Math.round(100*size/2**20)/100+' MiB':size<1024**4?Math.round(100*size/2**30)/100+' GiB':size<1024**5?Math.round(100*size/2**40)/100+' TiB':Math.round(100*size/2**50)/100+' PiB'}function voidDragHandler0(evt){return!1}function inputDropHandler(evt){return!!evt.shiftKey||inputDataHandler(evt,evt.dataTransfer)}function inputPasteHandler(evt){return inputDataHandler(evt,evt.clipboardData)}function inputClear(evt){evt.target.value=''}function setInputHandlers(node){node instanceof HTMLInputElement&&!node.disabled&&null!=node.offsetParent&&(node.ondragover=voidDragHandler0,node.ondblclick=inputClear,node.ondrop=inputDropHandler,node.onpaste=inputPasteHandler,node.placeholder='Paste/drop local or remote image')}function setTextAreahandlers(node){node instanceof HTMLTextAreaElement&&!node.disabled&&null!=node.offsetParent&&(node.ondragover=voidDragHandler0,node.ondrop=textAreaDropHandler,node.onpaste=textAreaPasteHandler)}function randomString(length){const possible="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let text="";for(let i=0;i<length;++i)text+=possible.charAt(Math.floor(Math.random()*possible.length));return text}function isSupportedType(image){return!(!this||'object'!=typeof this||!image||'object'!=typeof image)&&(!Array.isArray(this.types)||this.types.length<=0?!image.type||image.type.startsWith('image/'):this.types.some((function(mimeType){if(!mimeType)return!1;if(image.type)return image.type=='image/'+mimeType.toLowerCase();return image.name&&(extensions=>extensions.some(ext=>image.name.toLowerCase().endsWith('.'+ext.toLowerCase())))([mimeType])})))}